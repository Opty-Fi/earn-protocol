
AddressProvider = 0x0000000022d53366457f9d5e68ec105046fc4383 
mainRegistryContract = addressProvider.get_registry()
registry = Registry(mainRegistryContract)
Note1. Deposit pool of renBTC, hBTC, 
Note2. sBTC and 3pool has implementation contracts named MetaImplementationBTC.vy and MetaImplementationUSD.vy 
       deployed at 0x2f956eee002b0debd468cf2e0490d1aec65e027f and 0x5F890841f657d90E081bAbdB532A05996Af79Fe6 resp.
Note3. sBTC and 3pool has Deposit Zap named DepositZapBTC.vy and DepositZapUSD.vy deployed 
      at 0x7AbDBAf29929e7F8621B757D2a7c04d78d633834 and 0xA79828DF1850E8a3A3064576f380D90aECDD3359 resp.
Note4. sBTC and 3pool's Deposit Zap named DepositZapBTC.vy does not have curve() or pool() that is use to get swap contract address

                    Deposit                                        swap            lptoken               N_Coins                       underlying coins                  gauges
CURVE-Compound	0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06   Deposit.curve()  Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)
CURVE-USDT	      0xac795D2c97e60DF6a99ff1c814727302fD747a80   Deposit.curve()  Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)
CURVE-PAX 	      0xA50cCc70b6a011CffDdf45057E39679379187287   Deposit.curve()  Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)
CURVE-Y	      0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3   Deposit.curve()  Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)
CURVE-BUSD	      0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB   Deposit.curve()  Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)
CURVE-sUSD        0xFCBa3E75865d2d561BE8D220616520c171F12851   Deposit.curve()  Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)
CURVE-gusd	      0x0aE274c98c0415C0651AF8cF52b010136E4a0082   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)      
CURVE-husd	      0x0a53FaDa2d943057C47A301D25a4D9b3B8e01e8E   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-usdk	      0x6600e98b71dabfD4A8Cac03b302B0189Adb86Afb   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-usdn	      0x35796DAc54f144DFBAD1441Ec7C32313A7c29F39   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-linkusd     0xF6bDc2619FFDA72c537Cd9605e0A274Dc48cB1C9   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-musd	      0x78CF256256C8089d68Cde634Cf7cDEFb39286470   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-rsv	      0x459eAA680b47D27c8561708C96c949e0018dF5d9   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-tbtc	      0xaa82ca713D94bBA7A89CEAB55314F9EfFEdDc78c   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    
CURVE-dusd	      0x61E10659fe3aa93d036d099405224E4Ac24996d0   Deposit.pool()   Deposit.token()  registry.get_n_coins(swap)[1]  registry.get_underlying_coins(swap) registry.get_gauges(swap)    

Note: The get_underlying_coins() returns fix array of 8. 
grab first N_Coins elements from underlying_coins

Gauge Contract - Registry(addressProvider.get_registry()).get_gauges(pool.curve())
Note: the above returns fix array of 8, grab first element

Curve swap pool
-----------------------------------------------------------------------------------------------
Note. Swap pool of Compound, USDT, PAX, Y, BUSD and sUSD does not have "remove_liquidity_one_coin"
                                   Swap                          lpToken                       N_Coins                        underlying coins              gauges
CURVE-ren	      0x93054188d876f558f4a66B2EF1d97d16eDf0895B  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-sbtc	      0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-hbtc	      0x4CA9b3063Ec5866A4B82E437059D2C43d1be596F  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-3pool	      0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-gusd		0x4f062658EaAF2C1ccf8C8e36D6824CDf41167956  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-husd		0x3eF6A01A0f81D6046290f3e2A8c5b843e738E604  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-usdk		0x3E01dD8a5E1fb3481F0F589056b428Fc308AF0Fb  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-usdn		0x0f9cb53Ebe405d49A0bbdBD291A65Ff571bC83e1  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-linkusd	0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-musd	      0x8474DdbE98F5aA3179B3B3F5942D724aFcdec9f6  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-rsv	 	0xC18cC39da8b11dA8c3541C598eE022258F9744da  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-tbtc	 	0xC25099792E9349C7DD09759744ea681C7de2cb66  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)
CURVE-dusd		0x8038C01A0390a8c547446a0b2c18fc9aEFEcc10c  registry.get_lp_token(swap)    registry.get_n_coins(swap)[0]   registry.get_coins(swap)  registry_get_gauges(swap)


Registry

pseudo code                                                                 ABI
addressProvider.get_registry()          function get_registry() external view returns(address);
registry.get_n_coins(swap)              function get_n_coins(address) external view returns(uint256[2] memory);
registry.get_lp_token(swap)             function get_lp_token(address) external view returns(address);
registry.get_coins(swap)                function get_coins(address) external view returns(address[8] memory);
registry_get_gauges(swap)               function get_gauges(address) external view returns(address[10] memory, int128[10] memory);
registry.get_underlying_coins(swap)     function get_underlying_coins(address) external view returns(address[8] memory);

Old deposit zap

pseudo code                                           ABI
Deposit.curve()                   function curve() external view returns(address);
Deposit.token()                   function token() external view returns(address);

New deposit zap
pseudo code                                          ABI
Deposit.pool()                    function pool() external view returns(address);


function getPoolValue(address _liquidityPool, address _underlyingToken)
        external
        view
        override
        returns (uint256 _poolValue)
    {
        // address _curveRegistry = _getCurveRegistry();
        address _swapPool = _getSwapPool(_liquidityPool);
        // uint256 _nCoins = _getNCoins(_swapPool, _curveRegistry);
        // uint256[8] memory _underlyingBalances = ICurveRegistry(_curveRegistry).get_underlying_balances(_swapPool);
        // uint256[8] memory _underlyingDecimals = ICurveRegistry(_curveRegistry).get_underlying_decimals(_swapPool);
        // if (_swapPool != CurveSwapPoolAddresses.TBTC_SWAP_POOL) {
        //     for (uint256 _i = 0; _i < _nCoins; _i++) {
        //         _poolValue = _poolValue.add(_underlyingBalances[_i].div(10**_underlyingDecimals[_i]));
        //     }
        // } else {
        //     uint8 _decimals = AggregatorV3Interface(BTC_USD).decimals();
        //     (, int256 price, , , ) = AggregatorV3Interface(BTC_USD).latestRoundData();
        //     for (uint256 _i = 0; _i < _nCoins; _i++) {
        //         _poolValue = _poolValue.add((uint256(price).mul(_amount)).div(uint256(10**uint256(_decimals))));
        //     }
        // }

        // OR
        uint256 _virtualPrice = ICurveSwap(_swapPool).get_virtual_price();
        uint256 _totalSupply = IERC20(getLiquidityPoolToken(address(0), _liquidityPool)).totalSupply();
        _poolValue = (get_virtual_price.div(10**18)).mul(_totalSupply.div(10**18))
        
        

        // if(_swapPool == CurveSwapPoolAddresses.COMPOUND_SWAP_POOL) {
        //     // compound deposit pool
        //     // cDAI > DAI > USD 0 (cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643, DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F)
        //     // cUSDC > USDC > USD 1 (cUSDC = 0x39aa39c021dfbae8fac545936693ac917d5e7563, USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)
        //     // (swap.balances(0).div(10**decimals)).add(swap.balances(1).div(10**decimals))
        //     return
        // } else if(_swapPool == CurveSwapPoolAddresses.USDT_SWAP_POOL) {
        //     // compound usdt deposit pool
        //     // cDAI > DAI > USD 0
        //     // cUSDC > USDC > USD 1
        //     // USDT = USD 2 (USDT = 0xdac17f958d2ee523a2206206994597c13d831ec7)
        //     return
        // } else if(_swapPool == CurveSwapPoolAddresses.PAX_SWAP_POOL) {
        //     // pax swap pool
        //     // ycDAI > DAI = USD 0 (ycDAI = 0x99d1Fa417f94dcD62BfE781a1213c092a47041Bc)
        //     // ycUSDC > USDC = USD 1 (ycUSDC = 0x9777d7E2b60bB01759D0E2f8be2095df444cb07E)
        //     // ycUSDT > USDT = USD 2 (ycUSDT = 0x1bE5d71F2dA660BFdee8012dDc58D024448A0A59, cUSDT = )
        //     // PAX = USD 3
        //     return
        // } else if (_swapPool == CurveSwapPoolAddresses.Y_SWAP_POOL) {
        //     // y swap pool
        //     // yDAI > DAI = USD 0 (yDAI = 0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01)
        //     // yUSDC > USDC = USD 1 (yUSDC = 0xd6aD7a6750A7593E092a9B218d66C0A814a3436e)
        //     // yUSDT > USDT = USD 2 (yUSDT = 0x83f798e925BcD4017Eb265844FDDAbb448f1707D)
        //     // yTUSD > TUSD = USD 3 (yTUSD = 0x73a052500105205d34Daf004eAb301916DA8190f)
        //     return
        // } else if(_swapPool == CurveSwapPoolAddresses.BUSD_SWAP_POOL) {
        //     // busd swap pool
        //     // yDAI > DAI = USD 0 (yDAI = 0xC2cB1040220768554cf699b0d863A3cd4324ce32 -> yDAI token v3)
        //     // yUSDC > USDC = USD 1 (yUSDC = 0x26EA744E5B887E5205727f55dFBE8685e3b21951 -> yUSDC token v3)
        //     // yUSDT > USDT = USD 2 (yUSDT = 0xE6354ed5bC4b393a5Aad09f21c46E101e692d447 -> yUSDT token v3)
        //     // yBUSD > BUSD = USD 3 (yBUSD = 0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE, BUSD = 0x4Fabb145d64652a948d72533023f6E7A623C7C53)
        //     return
        // } else if(_swapPool == CurveSwapPoolAddresses.SUSD_SWAP_POOL) {
        //     // susd swap pool
        //     // DAI = USD 0
        //     // USDC = USD 1
        //     // USDT = USD 2
        //     // sUSD = USD 3 (sUSD = 0x57ab1e02fee23774580c119740129eac7081e9d3)
        //     return
        // } else if(_swapPool == CurveSwapPoolAddresses.GUSD_SWAP_POOL) {
        //     // gusd swap pool
        //     // GUSD = USD 0 (gusd = 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd)
        //     // 3Crv = USD 1 (3Crv = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490)
        //     return
        // } else if(_swapPool == CurveSwapPoolAddresses.HUSD_SWAP_POOL) {
        //     // husd swap pool
        //     // husd = USD 0 (husd = 0xdF574c24545E5FfEcb9a659c229253D4111d87e1)
        //     // 3Crv = USD 1
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.USDK_SWAP_POOL) {
        //     // usdk swap pool
        //     // USDK = USD 0 (usdk = 0x1c48f86ae57291F7686349F12601910BD8D470bb)
        //     // 3Crv = USD 1
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.USDN_SWAP_POOL) {
        //     // usdn swap pool
        //     // usdn = USD 0 (usdn = 0x674C6Ad92Fd080e4004b2312b45f796a192D27a0)
        //     // 3Crv = USD 1
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.LINKUSD_SWAP_POOL) {
        //     // linkusd swap pool
        //     // LINKUSD = USD? 0 (linkusd = 0x0E2EC54fC0B509F445631Bf4b91AB8168230C752)
        //     // 3Crv = USD 1
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.MUSD_SWAP_POOL) {
        //     // musd swap pool
        //     // MUSD = USD 0 (musd = 0xe2f2a5C287993345a840Db3B0845fbC70f5935a5)
        //     // 3Crv = USD 1
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.RSV_SWAP_POOL) {
        //     // rsv swap pool
        //     // RSV = USD 0 (rsv = 0x196f4727526eA7FB1e17b2071B3d8eAA38486988)
        //     // 3Crv = USD 1
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.TBTC_SWAP_POOL) {
        //     // tbtc swap pool
        //     // TBTC = convert to USD 0 (tbtc = 0x8dAEBADE922dF735c38C80C7eBD708Af50815fAa)
        //     // crvRenWSBTC = convert to USD 1 (crvRenWSBTC = 0x075b1bb99792c9E1041bA13afEf80C91a1e70fB3)
        //     return
        // }
        // else if(_swapPool == CurveSwapPoolAddresses.DUSD_SWAP_POOL) {
        //     // dusd swap pool
        //     // DUSD  = USD 0 (dusd = 0x5BC25f649fc4e26069dDF4cF4010F9f706c23831)
        //     // 3Crv = USD 1
        //     return
        // }
    }