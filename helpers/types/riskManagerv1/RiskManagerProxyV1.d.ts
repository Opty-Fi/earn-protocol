/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RiskManagerProxyV1Interface extends ethers.utils.Interface {
  functions: {
    "acceptImplementation()": FunctionFragment;
    "pendingRiskManagerImplementation()": FunctionFragment;
    "registryContract()": FunctionFragment;
    "riskManagerImplementation()": FunctionFragment;
    "setPendingImplementation(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "acceptImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingRiskManagerImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "registryContract", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskManagerImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "setPendingImplementation", values: [string]): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;

  decodeFunctionResult(functionFragment: "acceptImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingRiskManagerImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskManagerImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPendingImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegistry", data: BytesLike): Result;

  events: {
    "NewImplementation(address,address)": EventFragment;
    "NewPendingImplementation(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingImplementation"): EventFragment;
}

export type NewImplementationEvent = TypedEvent<
  [string, string] & { oldImplementation: string; newImplementation: string }
>;

export type NewPendingImplementationEvent = TypedEvent<
  [string, string] & {
    oldPendingImplementation: string;
    newPendingImplementation: string;
  }
>;

export class RiskManagerProxyV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RiskManagerProxyV1Interface;

  functions: {
    acceptImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<[string]>;

    registryContract(overrides?: CallOverrides): Promise<[string]>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<[string]>;

    setPendingImplementation(
      newPendingImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  acceptImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<string>;

  registryContract(overrides?: CallOverrides): Promise<string>;

  riskManagerImplementation(overrides?: CallOverrides): Promise<string>;

  setPendingImplementation(
    newPendingImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<string>;

    registryContract(overrides?: CallOverrides): Promise<string>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<string>;

    setPendingImplementation(newPendingImplementation: string, overrides?: CallOverrides): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewImplementation(address,address)"(
      oldImplementation?: null,
      newImplementation?: null,
    ): TypedEventFilter<[string, string], { oldImplementation: string; newImplementation: string }>;

    NewImplementation(
      oldImplementation?: null,
      newImplementation?: null,
    ): TypedEventFilter<[string, string], { oldImplementation: string; newImplementation: string }>;

    "NewPendingImplementation(address,address)"(
      oldPendingImplementation?: null,
      newPendingImplementation?: null,
    ): TypedEventFilter<[string, string], { oldPendingImplementation: string; newPendingImplementation: string }>;

    NewPendingImplementation(
      oldPendingImplementation?: null,
      newPendingImplementation?: null,
    ): TypedEventFilter<[string, string], { oldPendingImplementation: string; newPendingImplementation: string }>;
  };

  estimateGas: {
    acceptImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    registryContract(overrides?: CallOverrides): Promise<BigNumber>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingImplementation(
      newPendingImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptImplementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingImplementation(
      newPendingImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
