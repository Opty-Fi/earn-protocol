/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RiskManagerV1, RiskManagerV1Interface } from "../RiskManagerv1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract RiskManagerProxy",
        name: "_riskManagerProxy",
        type: "address",
      },
    ],
    name: "become",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_riskProfileCode",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_underlyingTokensHash",
        type: "bytes32",
      },
    ],
    name: "getBestStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isBorrow",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.StrategyStep[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_underlyingTokensHash",
        type: "bytes32",
      },
    ],
    name: "getVaultRewardTokenStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "hold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "convert",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.VaultRewardStrategy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingRiskManagerImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registryContract",
    outputs: [
      {
        internalType: "contract IRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riskManagerImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

export class RiskManagerV1__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<RiskManagerV1> {
    return super.deploy(_registry, overrides || {}) as Promise<RiskManagerV1>;
  }
  getDeployTransaction(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  attach(address: string): RiskManagerV1 {
    return super.attach(address) as RiskManagerV1;
  }
  connect(signer: Signer): RiskManagerV1__factory {
    return super.connect(signer) as RiskManagerV1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RiskManagerV1Interface {
    return new utils.Interface(_abi) as RiskManagerV1Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RiskManagerV1 {
    return new Contract(address, _abi, signerOrProvider) as RiskManagerV1;
  }
}
