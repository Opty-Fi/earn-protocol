/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RiskManagerV1Interface extends ethers.utils.Interface {
  functions: {
    "become(address)": FunctionFragment;
    "getBestStrategy(uint256,bytes32)": FunctionFragment;
    "getVaultRewardTokenStrategy(bytes32)": FunctionFragment;
    "pendingRiskManagerImplementation()": FunctionFragment;
    "registryContract()": FunctionFragment;
    "riskManagerImplementation()": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "become", values: [string]): string;
  encodeFunctionData(functionFragment: "getBestStrategy", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "getVaultRewardTokenStrategy", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pendingRiskManagerImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "registryContract", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskManagerImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;

  decodeFunctionResult(functionFragment: "become", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBestStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVaultRewardTokenStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingRiskManagerImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskManagerImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegistry", data: BytesLike): Result;

  events: {};
}

export class RiskManagerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RiskManagerV1Interface;

  functions: {
    become(
      _riskManagerProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getBestStrategy(
      _riskProfileCode: BigNumberish,
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([string, string, boolean] & {
          pool: string;
          outputToken: string;
          isBorrow: boolean;
        })[],
      ]
    >;

    getVaultRewardTokenStrategy(
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber] & { hold: BigNumber; convert: BigNumber }]>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<[string]>;

    registryContract(overrides?: CallOverrides): Promise<[string]>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<[string]>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  become(
    _riskManagerProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getBestStrategy(
    _riskProfileCode: BigNumberish,
    _underlyingTokensHash: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    ([string, string, boolean] & {
      pool: string;
      outputToken: string;
      isBorrow: boolean;
    })[]
  >;

  getVaultRewardTokenStrategy(
    _underlyingTokensHash: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { hold: BigNumber; convert: BigNumber }>;

  pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<string>;

  registryContract(overrides?: CallOverrides): Promise<string>;

  riskManagerImplementation(overrides?: CallOverrides): Promise<string>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    become(_riskManagerProxy: string, overrides?: CallOverrides): Promise<void>;

    getBestStrategy(
      _riskProfileCode: BigNumberish,
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      ([string, string, boolean] & {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      })[]
    >;

    getVaultRewardTokenStrategy(
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { hold: BigNumber; convert: BigNumber }>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<string>;

    registryContract(overrides?: CallOverrides): Promise<string>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<string>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    become(_riskManagerProxy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getBestStrategy(
      _riskProfileCode: BigNumberish,
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVaultRewardTokenStrategy(_underlyingTokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    registryContract(overrides?: CallOverrides): Promise<BigNumber>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    become(
      _riskManagerProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getBestStrategy(
      _riskProfileCode: BigNumberish,
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVaultRewardTokenStrategy(
      _underlyingTokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingRiskManagerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskManagerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
