/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VaultStorageV3V4, VaultStorageV3V4Interface } from "../VaultStorageV3V4";

const _abi = [
  {
    inputs: [],
    name: "_domainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blockToBlockVaultValues",
    outputs: [
      {
        internalType: "uint256",
        name: "actualVaultValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockMinVaultValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockMaxVaultValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blockTransaction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "investStrategyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "investStrategySteps",
    outputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBorrow",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumDepositValueUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pendingDeposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "queue",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalDeposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalValueLockedLimitUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingTokensHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "userDepositCapUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vaultConfiguration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedAccountsRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103f3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a9b497c811610097578063db7e563211610066578063db7e563214610223578063ddf0b0091461022b578063e94032561461026b578063eb3349b914610291576100f5565b8063a9b497c814610203578063ae78b1b01461020b578063c9dd6b2414610213578063d46ae8e21461021b576100f5565b80632495a599116100d35780632495a5991461018657806329dc0658146101aa5780636db5eeb2146101b25780638c0e0357146101fb576100f5565b806303f2e589146100fa5780631f6dcbce1461011457806323bb5fac14610145575b600080fd5b6101026102b7565b60408051918252519081900360200190f35b6101316004803603602081101561012a57600080fd5b50356102bd565b604080519115158252519081900360200190f35b6101686004803603604081101561015b57600080fd5b50803590602001356102d2565b60408051938452602084019290925282820152519081900360600190f35b61018e610311565b604080516001600160a01b039092168252519081900360200190f35b610102610320565b6101cf600480360360208110156101c857600080fd5b5035610326565b604080516001600160a01b03948516815292909316602083015215158183015290519081900360600190f35b610102610369565b61010261036f565b610102610375565b61010261037b565b610102610381565b610102610387565b6102486004803603602081101561024157600080fd5b503561038d565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6101026004803603602081101561028157600080fd5b50356001600160a01b03166103c2565b610102600480360360208110156102a757600080fd5b50356001600160a01b03166103d4565b60095481565b60106020526000908152604090205460ff1681565b600360205281600052604060002081815481106102eb57fe5b600091825260209091206003909102018054600182015460029092015490935090915083565b6008546001600160a01b031681565b600a5481565b600d818154811061033357fe5b6000918252602090912060029091020180546001909101546001600160a01b03918216925090811690600160a01b900460ff1683565b60055481565b60045481565b60065481565b600c5481565b600b5481565b60075481565b6000818154811061039a57fe5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b60026020526000908152604090205481565b6001602052600090815260409020548156fea164736f6c634300060c000a";

export class VaultStorageV3V4__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<VaultStorageV3V4> {
    return super.deploy(overrides || {}) as Promise<VaultStorageV3V4>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VaultStorageV3V4 {
    return super.attach(address) as VaultStorageV3V4;
  }
  connect(signer: Signer): VaultStorageV3V4__factory {
    return super.connect(signer) as VaultStorageV3V4__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultStorageV3V4Interface {
    return new utils.Interface(_abi) as VaultStorageV3V4Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VaultStorageV3V4 {
    return new Contract(address, _abi, signerOrProvider) as VaultStorageV3V4;
  }
}
