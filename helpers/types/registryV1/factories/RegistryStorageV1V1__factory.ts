/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RegistryStorageV1, RegistryStorageV1Interface } from "../RegistryStorageV1";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "allowWhitelistedState",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogAllowWhitelistedStateVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "discontinued",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogDiscontinueVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "isLimitedState",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogLimitStateVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogLiquidityPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "adapter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogLiquidityPoolToAdapter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "minimumDepositAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogMinimumDepositAmountVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "queueCap",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogQueueCapVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "lowerLimit",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "upperLimit",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogRPPoolRatings",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "rate",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogRateLiquidityPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint8",
        name: "rate",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogRateSwapPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "canBorrow",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogRiskProfile",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogSwapPool",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "adapter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogSwapPoolToAdapter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "tokensHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogTokensToTokensHash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "unpaused",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogUnpauseVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "userDepositCap",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogUserDepositCapVault",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "totalValueLockedLimitInUnderlying",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "LogVaultTotalValueLockedLimitInUnderlying",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "financeOperator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "TransferFinanceOperator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "optyDistributor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "TransferOPTYDistributor",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "TransferOperator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "riskOperator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "TransferRiskOperator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "strategyOperator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "TransferStrategyOperator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "treasury",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "TransferTreasury",
    type: "event",
  },
  {
    inputs: [],
    name: "aprOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "financeOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "harvestCodeProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "investStrategyRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidityPoolToAdapter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidityPools",
    outputs: [
      {
        internalType: "uint8",
        name: "rating",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "isLiquidityPool",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "odefiVaultBooster",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "operator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "opty",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "optyDistributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "optyStakingRateBalancer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingGovernance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingRegistryImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registryImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riskManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "riskOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "riskProfilesArray",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "strategyManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "strategyOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "strategyProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "swapPoolToAdapter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "swapPools",
    outputs: [
      {
        internalType: "uint8",
        name: "rating",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "isLiquidityPool",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokensHashIndexes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "tokensHashToTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "vaultToVaultConfiguration",
    outputs: [
      {
        internalType: "bool",
        name: "discontinued",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "unpaused",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isLimitedState",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "allowWhitelistedState",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "withdrawalFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "userDepositCap",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumDepositAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalValueLockedLimitInUnderlying",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "queueCap",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedUsers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawalFeeRange",
    outputs: [
      {
        internalType: "uint256",
        name: "lowerLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "upperLimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610720806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638fca99b211610104578063a7b61c51116100a2578063edd0fd7e11610071578063edd0fd7e14610368578063f1c49cee14610370578063f39c38a014610383578063fe794f931461038b576101da565b8063a7b61c5114610332578063b7407bf61461033a578063cbd6e6c314610342578063e486033914610355576101da565b80639611ad2d116100de5780639611ad2d146102f95780639be14283146103015780639fac5d4a14610314578063a26310061461031c576101da565b80638fca99b2146102be578063940e5ff4146102de57806394990bd8146102f1576101da565b80635aa6e6751161017c5780636cc1761e1161014b5780636cc1761e1461027e5780637f70cc921461028657806384e37fbf1461028e5780638bb0181014610296576101da565b80635aa6e6751461025e57806361660c5e1461026657806361d027b31461026e578063689589a214610276576101da565b806339b70e38116101b857806339b70e381461023e57806347842663146102465780634cacbb421461024e578063570ca73514610256576101da565b80630b0fd47e146101df5780631d1628b3146102095780632ea8f44e14610229575b600080fd5b6101f26101ed366004610619565b61039e565b6040516102009291906106fe565b60405180910390f35b61021c61021736600461066f565b6103bc565b60405161020091906106e7565b6102316103ce565b6040516102009190610687565b6102316103dd565b6102316103ec565b6102316103fb565b61023161040a565b610231610419565b610231610428565b610231610437565b610231610446565b610231610455565b610231610464565b610231610473565b6102a96102a4366004610619565b610482565b604051610200999897969594939291906106a6565b6102d16102cc36600461063b565b6104d6565b604051610200919061069b565b6101f26102ec366004610619565b6104f6565b610231610514565b610231610523565b61023161030f366004610619565b610532565b61023161054d565b61032461055c565b6040516102009291906106f0565b610231610565565b610231610574565b61021c61035036600461066f565b610583565b6102d1610363366004610619565b6105a1565b6102316105b6565b61023161037e366004610619565b6105c5565b6102316105e0565b61021c61039936600461066f565b6105ef565b600c6020526000908152604090205460ff8082169161010090041682565b600b6020526000908152604090205481565b6002546001600160a01b031681565b601a546001600160a01b031681565b6018546001600160a01b031681565b6016546001600160a01b031681565b6004546001600160a01b031681565b6000546001600160a01b031681565b6001546001600160a01b031681565b6005546001600160a01b031681565b6006546001600160a01b031681565b601e546001600160a01b031681565b601b546001600160a01b031681565b6009546001600160a01b031681565b60106020526000908152604090208054600282015460038301546004840154600585015460069095015460ff8086169661010087048216966201000081048316966301000000909104909216949193919289565b601160209081526000928352604080842090915290825290205460ff1681565b600d6020526000908152604090205460ff8082169161010090041682565b601c546001600160a01b031681565b6003546001600160a01b031681565b600e602052600090815260409020546001600160a01b031681565b601d546001600160a01b031681565b60125460135482565b6019546001600160a01b031681565b6017546001600160a01b031681565b6015818154811061059057fe5b600091825260209091200154905081565b600a6020526000908152604090205460ff1681565b6008546001600160a01b031681565b601f602052600090815260409020546001600160a01b031681565b6007546001600160a01b031681565b6014818154811061059057fe5b80356001600160a01b038116811461061357600080fd5b92915050565b60006020828403121561062a578081fd5b61063483836105fc565b9392505050565b6000806040838503121561064d578081fd5b61065784846105fc565b915061066684602085016105fc565b90509250929050565b600060208284031215610680578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b9815158952961515602089015294151560408801529215156060870152608086019190915260a085015260c084015260e08301526101008201526101200190565b90815260200190565b918252602082015260400190565b60ff929092168252151560208201526040019056fea164736f6c634300060c000a";

export class RegistryStorageV1V1__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<RegistryStorageV1> {
    return super.deploy(overrides || {}) as Promise<RegistryStorageV1>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RegistryStorageV1 {
    return super.attach(address) as RegistryStorageV1;
  }
  connect(signer: Signer): RegistryStorageV1V1__factory {
    return super.connect(signer) as RegistryStorageV1V1__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryStorageV1Interface {
    return new utils.Interface(_abi) as RegistryStorageV1Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RegistryStorageV1 {
    return new Contract(address, _abi, signerOrProvider) as RegistryStorageV1;
  }
}
