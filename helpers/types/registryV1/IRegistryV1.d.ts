/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRegistryV1Interface extends ethers.utils.Interface {
  functions: {
    "addRiskProfile(uint256,string,string,bool,(uint8,uint8))": FunctionFragment;
    "approveCreditPool(address)": FunctionFragment;
    "approveLiquidityPool(address)": FunctionFragment;
    "approveLiquidityPoolAndMapToAdapter(tuple[])": FunctionFragment;
    "approveToken(address)": FunctionFragment;
    "approveTokenAndMapToTokensHash(bytes32,address[])": FunctionFragment;
    "getFinanceOperator()": FunctionFragment;
    "getGovernance()": FunctionFragment;
    "getHarvestCodeProvider()": FunctionFragment;
    "getLiquidityPool(address)": FunctionFragment;
    "getLiquidityPoolToAdapter(address)": FunctionFragment;
    "getODEFIVaultBooster()": FunctionFragment;
    "getOPTYDistributor()": FunctionFragment;
    "getOperator()": FunctionFragment;
    "getRiskManager()": FunctionFragment;
    "getRiskOperator()": FunctionFragment;
    "getRiskProfile(uint256)": FunctionFragment;
    "getRiskProfileList()": FunctionFragment;
    "getStrategyOperator()": FunctionFragment;
    "getStrategyProvider()": FunctionFragment;
    "getTokenHashes()": FunctionFragment;
    "getTokensHashByIndex(uint256)": FunctionFragment;
    "getTokensHashIndexByHash(bytes32)": FunctionFragment;
    "getTokensHashToTokenList(bytes32)": FunctionFragment;
    "isApprovedToken(address)": FunctionFragment;
    "rateCreditPool(address,uint8)": FunctionFragment;
    "rateLiquidityPool(tuple[])": FunctionFragment;
    "removeRiskProfile(uint256)": FunctionFragment;
    "revokeCreditPool(address[])": FunctionFragment;
    "revokeLiquidityPool(address[])": FunctionFragment;
    "revokeToken(address)": FunctionFragment;
    "setHarvestCodeProvider(address)": FunctionFragment;
    "setLiquidityPoolToAdapter(address,address)": FunctionFragment;
    "setODEFIVaultBooster(address)": FunctionFragment;
    "setOPTY(address)": FunctionFragment;
    "setRiskManager(address)": FunctionFragment;
    "setStrategyProvider(address)": FunctionFragment;
    "setTokensHashToTokens(bytes32,address[])": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "updateRPPoolRatings(uint256,(uint8,uint8))": FunctionFragment;
    "updateRiskProfileBorrow(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRiskProfile",
    values: [BigNumberish, string, string, boolean, { lowerLimit: BigNumberish; upperLimit: BigNumberish }],
  ): string;
  encodeFunctionData(functionFragment: "approveCreditPool", values: [string]): string;
  encodeFunctionData(functionFragment: "approveLiquidityPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveLiquidityPoolAndMapToAdapter",
    values: [{ pool: string; adapter: string }[]],
  ): string;
  encodeFunctionData(functionFragment: "approveToken", values: [string]): string;
  encodeFunctionData(functionFragment: "approveTokenAndMapToTokensHash", values: [BytesLike, string[]]): string;
  encodeFunctionData(functionFragment: "getFinanceOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getGovernance", values?: undefined): string;
  encodeFunctionData(functionFragment: "getHarvestCodeProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLiquidityPool", values: [string]): string;
  encodeFunctionData(functionFragment: "getLiquidityPoolToAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "getODEFIVaultBooster", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOPTYDistributor", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskProfile", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getRiskProfileList", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStrategyOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStrategyProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTokenHashes", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTokensHashByIndex", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getTokensHashIndexByHash", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getTokensHashToTokenList", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "isApprovedToken", values: [string]): string;
  encodeFunctionData(functionFragment: "rateCreditPool", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "rateLiquidityPool", values: [{ pool: string; rate: BigNumberish }[]]): string;
  encodeFunctionData(functionFragment: "removeRiskProfile", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "revokeCreditPool", values: [string[]]): string;
  encodeFunctionData(functionFragment: "revokeLiquidityPool", values: [string[]]): string;
  encodeFunctionData(functionFragment: "revokeToken", values: [string]): string;
  encodeFunctionData(functionFragment: "setHarvestCodeProvider", values: [string]): string;
  encodeFunctionData(functionFragment: "setLiquidityPoolToAdapter", values: [string, string]): string;
  encodeFunctionData(functionFragment: "setODEFIVaultBooster", values: [string]): string;
  encodeFunctionData(functionFragment: "setOPTY", values: [string]): string;
  encodeFunctionData(functionFragment: "setRiskManager", values: [string]): string;
  encodeFunctionData(functionFragment: "setStrategyProvider", values: [string]): string;
  encodeFunctionData(functionFragment: "setTokensHashToTokens", values: [BytesLike, string[]]): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateRPPoolRatings",
    values: [BigNumberish, { lowerLimit: BigNumberish; upperLimit: BigNumberish }],
  ): string;
  encodeFunctionData(functionFragment: "updateRiskProfileBorrow", values: [BigNumberish, boolean]): string;

  decodeFunctionResult(functionFragment: "addRiskProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveCreditPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveLiquidityPoolAndMapToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveTokenAndMapToTokensHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFinanceOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGovernance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHarvestCodeProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLiquidityPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getODEFIVaultBooster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOPTYDistributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskProfileList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStrategyOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStrategyProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensHashByIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensHashIndexByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensHashToTokenList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApprovedToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateCreditPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeRiskProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeCreditPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHarvestCodeProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLiquidityPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setODEFIVaultBooster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOPTY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRiskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStrategyProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTokensHashToTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRPPoolRatings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRiskProfileBorrow", data: BytesLike): Result;

  events: {};
}

export class IRegistryV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRegistryV1Interface;

  functions: {
    "addRiskProfile(uint256,string,string,bool,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _canBorrow: boolean,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addRiskProfile(uint256[],string[],string[],bool[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _canBorrow: boolean[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveCreditPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveCreditPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getFinanceOperator(overrides?: CallOverrides): Promise<[string]>;

    getGovernance(overrides?: CallOverrides): Promise<[string]>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityPool(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<
      [[number, boolean] & { rating: number; isLiquidityPool: boolean }] & {
        _liquidityPool: [number, boolean] & {
          rating: number;
          isLiquidityPool: boolean;
        };
      }
    >;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<[string] & { _adapter: string }>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<[string]>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<[string]>;

    getOperator(overrides?: CallOverrides): Promise<[string]>;

    getRiskManager(overrides?: CallOverrides): Promise<[string]>;

    getRiskOperator(overrides?: CallOverrides): Promise<[string]>;

    getRiskProfile(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, boolean, [number, number] & { lowerLimit: number; upperLimit: number }, boolean, string, string] & {
          index: BigNumber;
          canBorrow: boolean;
          poolRatingsRange: [number, number] & {
            lowerLimit: number;
            upperLimit: number;
          };
          exists: boolean;
          name: string;
          symbol: string;
        },
      ] & {
        _riskProfile: [
          BigNumber,
          boolean,
          [number, number] & { lowerLimit: number; upperLimit: number },
          boolean,
          string,
          string,
        ] & {
          index: BigNumber;
          canBorrow: boolean;
          poolRatingsRange: [number, number] & {
            lowerLimit: number;
            upperLimit: number;
          };
          exists: boolean;
          name: string;
          symbol: string;
        };
      }
    >;

    getRiskProfileList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getStrategyOperator(overrides?: CallOverrides): Promise<[string]>;

    getStrategyProvider(overrides?: CallOverrides): Promise<[string]>;

    getTokenHashes(overrides?: CallOverrides): Promise<[string[]]>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<[string] & { _tokensHash: string }>;

    getTokensHashIndexByHash(
      _tokensHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _index: BigNumber }>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<[boolean] & { _isTokenApproved: boolean }>;

    "rateCreditPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "rateCreditPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "rateLiquidityPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeRiskProfile(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeCreditPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeCreditPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestCodeProvider(
      _harvestCodeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setODEFIVaultBooster(
      _odefiVaultBooster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setRiskManager(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategyProvider(
      _strategyProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateRiskProfileBorrow(
      _riskProfileCode: BigNumberish,
      _canBorrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  "addRiskProfile(uint256,string,string,bool,(uint8,uint8))"(
    _riskProfileCode: BigNumberish,
    _name: string,
    _symbol: string,
    _canBorrow: boolean,
    _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "addRiskProfile(uint256[],string[],string[],bool[],tuple[])"(
    _riskProfileCodes: BigNumberish[],
    _names: string[],
    _symbols: string[],
    _canBorrow: boolean[],
    _poolRatingRanges: { lowerLimit: BigNumberish; upperLimit: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveCreditPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveCreditPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPoolAndMapToAdapter(tuple[])"(
    _poolAdapters: { pool: string; adapter: string }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPoolAndMapToAdapter(address,address)"(
    _pool: string,
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveToken(address[])"(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveTokenAndMapToTokensHash(bytes32,address[])"(
    _tokensHash: BytesLike,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveTokenAndMapToTokensHash(tuple[])"(
    _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getFinanceOperator(overrides?: CallOverrides): Promise<string>;

  getGovernance(overrides?: CallOverrides): Promise<string>;

  getHarvestCodeProvider(overrides?: CallOverrides): Promise<string>;

  getLiquidityPool(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<string>;

  getODEFIVaultBooster(overrides?: CallOverrides): Promise<string>;

  getOPTYDistributor(overrides?: CallOverrides): Promise<string>;

  getOperator(overrides?: CallOverrides): Promise<string>;

  getRiskManager(overrides?: CallOverrides): Promise<string>;

  getRiskOperator(overrides?: CallOverrides): Promise<string>;

  getRiskProfile(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, boolean, [number, number] & { lowerLimit: number; upperLimit: number }, boolean, string, string] & {
      index: BigNumber;
      canBorrow: boolean;
      poolRatingsRange: [number, number] & {
        lowerLimit: number;
        upperLimit: number;
      };
      exists: boolean;
      name: string;
      symbol: string;
    }
  >;

  getRiskProfileList(overrides?: CallOverrides): Promise<BigNumber[]>;

  getStrategyOperator(overrides?: CallOverrides): Promise<string>;

  getStrategyProvider(overrides?: CallOverrides): Promise<string>;

  getTokenHashes(overrides?: CallOverrides): Promise<string[]>;

  getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  isApprovedToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

  "rateCreditPool(address,uint8)"(
    _pool: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "rateCreditPool(tuple[])"(
    _poolRates: { pool: string; rate: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "rateLiquidityPool(tuple[])"(
    _poolRates: { pool: string; rate: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "rateLiquidityPool(address,uint8)"(
    _pool: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeRiskProfile(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeCreditPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeCreditPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeLiquidityPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeLiquidityPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeToken(address[])"(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestCodeProvider(
    _harvestCodeProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setLiquidityPoolToAdapter(address,address)"(
    _pool: string,
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setLiquidityPoolToAdapter(tuple[])"(
    _poolAdapters: { pool: string; adapter: string }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setODEFIVaultBooster(
    _odefiVaultBooster: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setRiskManager(
    _riskManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategyProvider(
    _strategyProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setTokensHashToTokens(bytes32,address[])"(
    _tokensHash: BytesLike,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setTokensHashToTokens(tuple[])"(
    _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateRPPoolRatings(
    _riskProfileCode: BigNumberish,
    _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateRiskProfileBorrow(
    _riskProfileCode: BigNumberish,
    _canBorrow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    "addRiskProfile(uint256,string,string,bool,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _canBorrow: boolean,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: CallOverrides,
    ): Promise<void>;

    "addRiskProfile(uint256[],string[],string[],bool[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _canBorrow: boolean[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveCreditPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "approveCreditPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "approveLiquidityPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "approveLiquidityPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveToken(address)"(_token: string, overrides?: CallOverrides): Promise<void>;

    "approveToken(address[])"(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    getFinanceOperator(overrides?: CallOverrides): Promise<string>;

    getGovernance(overrides?: CallOverrides): Promise<string>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<string>;

    getLiquidityPool(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<string>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<string>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<string>;

    getOperator(overrides?: CallOverrides): Promise<string>;

    getRiskManager(overrides?: CallOverrides): Promise<string>;

    getRiskOperator(overrides?: CallOverrides): Promise<string>;

    getRiskProfile(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, boolean, [number, number] & { lowerLimit: number; upperLimit: number }, boolean, string, string] & {
        index: BigNumber;
        canBorrow: boolean;
        poolRatingsRange: [number, number] & {
          lowerLimit: number;
          upperLimit: number;
        };
        exists: boolean;
        name: string;
        symbol: string;
      }
    >;

    getRiskProfileList(overrides?: CallOverrides): Promise<BigNumber[]>;

    getStrategyOperator(overrides?: CallOverrides): Promise<string>;

    getStrategyProvider(overrides?: CallOverrides): Promise<string>;

    getTokenHashes(overrides?: CallOverrides): Promise<string[]>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    "rateCreditPool(address,uint8)"(_pool: string, _rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "rateCreditPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "rateLiquidityPool(address,uint8)"(_pool: string, _rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeRiskProfile(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "revokeCreditPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "revokeCreditPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "revokeLiquidityPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "revokeLiquidityPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "revokeToken(address)"(_token: string, overrides?: CallOverrides): Promise<void>;

    "revokeToken(address[])"(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    setHarvestCodeProvider(_harvestCodeProvider: string, overrides?: CallOverrides): Promise<void>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setODEFIVaultBooster(_odefiVaultBooster: string, overrides?: CallOverrides): Promise<void>;

    setOPTY(_opty: string, overrides?: CallOverrides): Promise<void>;

    setRiskManager(_riskManager: string, overrides?: CallOverrides): Promise<void>;

    setStrategyProvider(_strategyProvider: string, overrides?: CallOverrides): Promise<void>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRiskProfileBorrow(
      _riskProfileCode: BigNumberish,
      _canBorrow: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "addRiskProfile(uint256,string,string,bool,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _canBorrow: boolean,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "addRiskProfile(uint256[],string[],string[],bool[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _canBorrow: boolean[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveCreditPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveCreditPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getFinanceOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPool(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<BigNumber>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    getOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskManager(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskProfile(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRiskProfileList(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenHashes(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rateCreditPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "rateCreditPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "rateLiquidityPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeRiskProfile(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeCreditPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeCreditPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHarvestCodeProvider(
      _harvestCodeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setODEFIVaultBooster(
      _odefiVaultBooster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRiskManager(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategyProvider(
      _strategyProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateRiskProfileBorrow(
      _riskProfileCode: BigNumberish,
      _canBorrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "addRiskProfile(uint256,string,string,bool,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _canBorrow: boolean,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "addRiskProfile(uint256[],string[],string[],bool[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _canBorrow: boolean[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveCreditPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveCreditPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getFinanceOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityPool(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskProfile(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskProfileList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateCreditPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "rateCreditPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "rateLiquidityPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeRiskProfile(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeCreditPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeCreditPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestCodeProvider(
      _harvestCodeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setODEFIVaultBooster(
      _odefiVaultBooster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setRiskManager(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategyProvider(
      _strategyProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateRiskProfileBorrow(
      _riskProfileCode: BigNumberish,
      _canBorrow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
