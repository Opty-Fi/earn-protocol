/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StrategyManagerV1Interface extends ethers.utils.Interface {
  functions: {
    "getClaimRewardTokenCode(address,address,address)": FunctionFragment;
    "getDepositInternalTransactionCount(tuple[],address)": FunctionFragment;
    "getLastStrategyStepBalanceLP(tuple[],address,address,address)": FunctionFragment;
    "getOraSomeValueLP(tuple[],address,address,uint256)": FunctionFragment;
    "getOraValueUT(tuple[],address,address,address)": FunctionFragment;
    "getPoolDepositCodes(tuple[],(address,address,address,uint256,uint256,uint256))": FunctionFragment;
    "getPoolWithdrawCodes(tuple[],(address,address,address,uint256,uint256,uint256))": FunctionFragment;
    "getRewardToken(address,address)": FunctionFragment;
    "getUnclaimedRewardTokenAmount(address,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getClaimRewardTokenCode", values: [string, string, string]): string;
  encodeFunctionData(
    functionFragment: "getDepositInternalTransactionCount",
    values: [{ pool: string; outputToken: string; isBorrow: boolean }[], string],
  ): string;
  encodeFunctionData(
    functionFragment: "getLastStrategyStepBalanceLP",
    values: [{ pool: string; outputToken: string; isBorrow: boolean }[], string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getOraSomeValueLP",
    values: [{ pool: string; outputToken: string; isBorrow: boolean }[], string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getOraValueUT",
    values: [{ pool: string; outputToken: string; isBorrow: boolean }[], string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolDepositCodes",
    values: [
      { pool: string; outputToken: string; isBorrow: boolean }[],
      {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolWithdrawCodes",
    values: [
      { pool: string; outputToken: string; isBorrow: boolean }[],
      {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(functionFragment: "getRewardToken", values: [string, string]): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewardTokenAmount",
    values: [string, string, string, string],
  ): string;

  decodeFunctionResult(functionFragment: "getClaimRewardTokenCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDepositInternalTransactionCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLastStrategyStepBalanceLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOraSomeValueLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOraValueUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolDepositCodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolWithdrawCodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRewardToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUnclaimedRewardTokenAmount", data: BytesLike): Result;

  events: {};
}

export class StrategyManagerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StrategyManagerV1Interface;

  functions: {
    getClaimRewardTokenCode(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { _codes: string[] }>;

    getDepositInternalTransactionCount(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLastStrategyStepBalanceLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getOraSomeValueLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _underlyingToken: string,
      _wantAmountUT: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _amountLP: BigNumber }>;

    getOraValueUT(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _amountUT: BigNumber }>;

    getPoolDepositCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<[string[]] & { _codes: string[] }>;

    getPoolWithdrawCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<[string[]] & { _codes: string[] }>;

    getRewardToken(_liquidityPool: string, _registryContract: string, overrides?: CallOverrides): Promise<[string]>;

    getUnclaimedRewardTokenAmount(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  getClaimRewardTokenCode(
    _liquidityPool: string,
    _registryContract: string,
    _vault: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getDepositInternalTransactionCount(
    _strategySteps: { pool: string; outputToken: string; isBorrow: boolean }[],
    _registryContract: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLastStrategyStepBalanceLP(
    _strategySteps: { pool: string; outputToken: string; isBorrow: boolean }[],
    _registryContract: string,
    _vault: string,
    _underlyingToken: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getOraSomeValueLP(
    _strategySteps: { pool: string; outputToken: string; isBorrow: boolean }[],
    _registryContract: string,
    _underlyingToken: string,
    _wantAmountUT: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getOraValueUT(
    _strategySteps: { pool: string; outputToken: string; isBorrow: boolean }[],
    _registryContract: string,
    _vault: string,
    _underlyingToken: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPoolDepositCodes(
    _strategySteps: { pool: string; outputToken: string; isBorrow: boolean }[],
    _strategyConfigurationParams: {
      registryContract: string;
      vault: string;
      underlyingToken: string;
      initialStepInputAmount: BigNumberish;
      internalTransactionIndex: BigNumberish;
      internalTransactionCount: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getPoolWithdrawCodes(
    _strategySteps: { pool: string; outputToken: string; isBorrow: boolean }[],
    _strategyConfigurationParams: {
      registryContract: string;
      vault: string;
      underlyingToken: string;
      initialStepInputAmount: BigNumberish;
      internalTransactionIndex: BigNumberish;
      internalTransactionCount: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getRewardToken(_liquidityPool: string, _registryContract: string, overrides?: CallOverrides): Promise<string>;

  getUnclaimedRewardTokenAmount(
    _liquidityPool: string,
    _registryContract: string,
    _vault: string,
    _underlyingToken: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    getClaimRewardTokenCode(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getDepositInternalTransactionCount(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastStrategyStepBalanceLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOraSomeValueLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _underlyingToken: string,
      _wantAmountUT: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOraValueUT(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolDepositCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getPoolWithdrawCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getRewardToken(_liquidityPool: string, _registryContract: string, overrides?: CallOverrides): Promise<string>;

    getUnclaimedRewardTokenAmount(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getClaimRewardTokenCode(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositInternalTransactionCount(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLastStrategyStepBalanceLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOraSomeValueLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _underlyingToken: string,
      _wantAmountUT: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOraValueUT(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolDepositCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolWithdrawCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardToken(_liquidityPool: string, _registryContract: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUnclaimedRewardTokenAmount(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getClaimRewardTokenCode(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDepositInternalTransactionCount(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLastStrategyStepBalanceLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOraSomeValueLP(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _underlyingToken: string,
      _wantAmountUT: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOraValueUT(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolDepositCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolWithdrawCodes(
      _strategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      _strategyConfigurationParams: {
        registryContract: string;
        vault: string;
        underlyingToken: string;
        initialStepInputAmount: BigNumberish;
        internalTransactionIndex: BigNumberish;
        internalTransactionCount: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardToken(
      _liquidityPool: string,
      _registryContract: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUnclaimedRewardTokenAmount(
      _liquidityPool: string,
      _registryContract: string,
      _vault: string,
      _underlyingToken: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
