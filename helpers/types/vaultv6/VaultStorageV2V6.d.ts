/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultStorageV2V6Interface extends ethers.utils.Interface {
  functions: {
    "_domainSeparator()": FunctionFragment;
    "blockToBlockVaultValues(uint256,uint256)": FunctionFragment;
    "investStrategyHash()": FunctionFragment;
    "investStrategySteps(uint256)": FunctionFragment;
    "minimumDepositValueUT()": FunctionFragment;
    "pendingDeposits(address)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "totalDeposits(address)": FunctionFragment;
    "totalValueLockedLimitUT()": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "underlyingTokensHash()": FunctionFragment;
    "userDepositCapUT()": FunctionFragment;
    "vaultConfiguration()": FunctionFragment;
    "whitelistedAccountsRoot()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_domainSeparator", values?: undefined): string;
  encodeFunctionData(functionFragment: "blockToBlockVaultValues", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "investStrategyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "investStrategySteps", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "minimumDepositValueUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingDeposits", values: [string]): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "totalDeposits", values: [string]): string;
  encodeFunctionData(functionFragment: "totalValueLockedLimitUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "underlyingToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "underlyingTokensHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositCapUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultConfiguration", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelistedAccountsRoot", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_domainSeparator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blockToBlockVaultValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategySteps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumDepositValueUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalValueLockedLimitUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlyingToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlyingTokensHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositCapUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultConfiguration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedAccountsRoot", data: BytesLike): Result;

  events: {};
}

export class VaultStorageV2V6 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultStorageV2Interface;

  functions: {
    _domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        actualVaultValue: BigNumber;
        blockMinVaultValue: BigNumber;
        blockMaxVaultValue: BigNumber;
      }
    >;

    investStrategyHash(overrides?: CallOverrides): Promise<[string]>;

    investStrategySteps(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, boolean] & {
        pool: string;
        outputToken: string;
        isSwap: boolean;
      }
    >;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<[string]>;

    userDepositCapUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultConfiguration(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<[string]>;
  };

  _domainSeparator(overrides?: CallOverrides): Promise<string>;

  blockToBlockVaultValues(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      actualVaultValue: BigNumber;
      blockMinVaultValue: BigNumber;
      blockMaxVaultValue: BigNumber;
    }
  >;

  investStrategyHash(overrides?: CallOverrides): Promise<string>;

  investStrategySteps(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, boolean] & {
      pool: string;
      outputToken: string;
      isSwap: boolean;
    }
  >;

  minimumDepositValueUT(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queue(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

  totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalValueLockedLimitUT(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  underlyingTokensHash(overrides?: CallOverrides): Promise<string>;

  userDepositCapUT(overrides?: CallOverrides): Promise<BigNumber>;

  vaultConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedAccountsRoot(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _domainSeparator(overrides?: CallOverrides): Promise<string>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        actualVaultValue: BigNumber;
        blockMinVaultValue: BigNumber;
        blockMaxVaultValue: BigNumber;
      }
    >;

    investStrategyHash(overrides?: CallOverrides): Promise<string>;

    investStrategySteps(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, boolean] & {
        pool: string;
        outputToken: string;
        isSwap: boolean;
      }
    >;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<string>;

    userDepositCapUT(overrides?: CallOverrides): Promise<BigNumber>;

    vaultConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    blockToBlockVaultValues(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    investStrategyHash(overrides?: CallOverrides): Promise<BigNumber>;

    investStrategySteps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositCapUT(overrides?: CallOverrides): Promise<BigNumber>;

    vaultConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    investStrategyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investStrategySteps(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDepositCapUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
