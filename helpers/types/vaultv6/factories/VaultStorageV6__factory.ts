/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VaultStorageV6, VaultStorageV6Interface } from "../VaultStorageV6";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "blockToBlockVaultValues",
    outputs: [
      {
        internalType: "uint256",
        name: "actualVaultValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockMinVaultValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockMaxVaultValue",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "investStrategyHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minimumDepositValueUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pendingDeposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "queue",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalDeposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalValueLockedLimitUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "userDepositCapUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vaultConfiguration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedAccountsRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102b9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a9b497c811610071578063a9b497c81461013d578063ae78b1b014610145578063db7e56321461014d578063ddf0b00914610155578063e940325614610195578063eb3349b9146101bb576100a9565b806303f2e589146100ae57806323bb5fac146100c85780632495a5991461010957806329dc06581461012d5780638c0e035714610135575b600080fd5b6100b66101e1565b60408051918252519081900360200190f35b6100eb600480360360408110156100de57600080fd5b50803590602001356101e7565b60408051938452602084019290925282820152519081900360600190f35b610111610226565b604080516001600160a01b039092168252519081900360200190f35b6100b6610235565b6100b661023b565b6100b6610241565b6100b6610247565b6100b661024d565b6101726004803603602081101561016b57600080fd5b5035610253565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6100b6600480360360208110156101ab57600080fd5b50356001600160a01b0316610288565b6100b6600480360360208110156101d157600080fd5b50356001600160a01b031661029a565b60095481565b6003602052816000526040600020818154811061020057fe5b600091825260209091206003909102018054600182015460029092015490935090915083565b6008546001600160a01b031681565b600a5481565b60055481565b60045481565b60065481565b60075481565b6000818154811061026057fe5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b60026020526000908152604090205481565b6001602052600090815260409020548156fea164736f6c634300060c000a";

export class VaultStorageV6__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<VaultStorageV6> {
    return super.deploy(overrides || {}) as Promise<VaultStorageV6>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VaultStorageV6 {
    return super.attach(address) as VaultStorageV6;
  }
  connect(signer: Signer): VaultStorageV6__factory {
    return super.connect(signer) as VaultStorageV6__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultStorageV6Interface {
    return new utils.Interface(_abi) as VaultStorageV6Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VaultStorageV6 {
    return new Contract(address, _abi, signerOrProvider) as VaultStorageV6;
  }
}
