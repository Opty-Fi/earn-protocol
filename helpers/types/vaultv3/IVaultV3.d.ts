/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultV3Interface extends ethers.utils.Interface {
  functions: {
    "adminCall(bytes[])": FunctionFragment;
    "balance()": FunctionFragment;
    "discontinue()": FunctionFragment;
    "getDepositQueue()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "getPricePerFullShareWrite()": FunctionFragment;
    "harvest(bytes32)": FunctionFragment;
    "isMaxVaultValueJumpAllowed(uint256,uint256)": FunctionFragment;
    "rebalance()": FunctionFragment;
    "setMaxVaultValueJump(uint256)": FunctionFragment;
    "setRiskProfileCode(uint256)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "setUnpaused(bool)": FunctionFragment;
    "userDeposit(uint256)": FunctionFragment;
    "userDepositAll()": FunctionFragment;
    "userDepositAllRebalance()": FunctionFragment;
    "userDepositAllRebalanceWithCHI()": FunctionFragment;
    "userDepositAllWithCHI()": FunctionFragment;
    "userDepositRebalance(uint256)": FunctionFragment;
    "userDepositRebalanceWithCHI(uint256)": FunctionFragment;
    "userDepositWithCHI(uint256)": FunctionFragment;
    "userWithdrawAllRebalance()": FunctionFragment;
    "userWithdrawAllRebalanceWithCHI()": FunctionFragment;
    "userWithdrawRebalance(uint256)": FunctionFragment;
    "userWithdrawRebalanceWithCHI(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adminCall", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "discontinue", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDepositQueue", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPricePerFullShare", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPricePerFullShareWrite", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvest", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "isMaxVaultValueJumpAllowed", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMaxVaultValueJump", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setRiskProfileCode", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(functionFragment: "setUnpaused", values: [boolean]): string;
  encodeFunctionData(functionFragment: "userDeposit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userDepositAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositAllRebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositAllRebalanceWithCHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositAllWithCHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositRebalance", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userDepositRebalanceWithCHI", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userDepositWithCHI", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userWithdrawAllRebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "userWithdrawAllRebalanceWithCHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "userWithdrawRebalance", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userWithdrawRebalanceWithCHI", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "adminCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "discontinue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDepositQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPricePerFullShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPricePerFullShareWrite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMaxVaultValueJumpAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxVaultValueJump", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRiskProfileCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUnpaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAllRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAllRebalanceWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAllWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositRebalanceWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawAllRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawAllRebalanceWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawRebalanceWithCHI", data: BytesLike): Result;

  events: {};
}

export class IVaultV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultV3Interface;

  functions: {
    adminCall(
      _codes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getDepositQueue(
      overrides?: CallOverrides,
    ): Promise<[([string, BigNumber] & { account: string; value: BigNumber })[]]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricePerFullShareWrite(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    harvest(
      _investStrategyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setMaxVaultValueJump(
      _maxVaultValueJump: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setToken(
      _underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnpaused(
      _unpaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDepositAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDepositRebalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositRebalanceWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userWithdrawAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawRebalance(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawRebalanceWithCHI(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  adminCall(
    _codes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getDepositQueue(overrides?: CallOverrides): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  getPricePerFullShareWrite(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  harvest(
    _investStrategyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isMaxVaultValueJumpAllowed(
    _diff: BigNumberish,
    _currentVaultValue: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setMaxVaultValueJump(
    _maxVaultValueJump: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRiskProfileCode(
    _riskProfileCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setToken(
    _underlyingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnpaused(
    _unpaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDeposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDepositAllRebalanceWithCHI(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDepositRebalance(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositRebalanceWithCHI(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositWithCHI(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userWithdrawAllRebalanceWithCHI(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawRebalance(
    _redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawRebalanceWithCHI(
    _redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    adminCall(_codes: BytesLike[], overrides?: CallOverrides): Promise<void>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    discontinue(overrides?: CallOverrides): Promise<void>;

    getDepositQueue(
      overrides?: CallOverrides,
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShareWrite(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(_investStrategyHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    setMaxVaultValueJump(_maxVaultValueJump: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRiskProfileCode(_riskProfileCode: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setToken(_underlyingToken: string, overrides?: CallOverrides): Promise<void>;

    setUnpaused(_unpaused: boolean, overrides?: CallOverrides): Promise<void>;

    userDeposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userDepositAll(overrides?: CallOverrides): Promise<void>;

    userDepositAllRebalance(overrides?: CallOverrides): Promise<void>;

    userDepositAllRebalanceWithCHI(overrides?: CallOverrides): Promise<void>;

    userDepositAllWithCHI(overrides?: CallOverrides): Promise<void>;

    userDepositRebalance(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userDepositRebalanceWithCHI(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userDepositWithCHI(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userWithdrawAllRebalance(overrides?: CallOverrides): Promise<void>;

    userWithdrawAllRebalanceWithCHI(overrides?: CallOverrides): Promise<void>;

    userWithdrawRebalance(_redeemAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userWithdrawRebalanceWithCHI(_redeemAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adminCall(_codes: BytesLike[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getDepositQueue(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShareWrite(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    harvest(
      _investStrategyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setMaxVaultValueJump(
      _maxVaultValueJump: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setToken(_underlyingToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUnpaused(_unpaused: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDeposit(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAllRebalanceWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositRebalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userDepositRebalanceWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userDepositWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userWithdrawAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userWithdrawAllRebalanceWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userWithdrawRebalance(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userWithdrawRebalanceWithCHI(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminCall(
      _codes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getDepositQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShareWrite(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    harvest(
      _investStrategyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setMaxVaultValueJump(
      _maxVaultValueJump: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setToken(
      _underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnpaused(
      _unpaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDepositAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDepositRebalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositRebalanceWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawAllRebalance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawRebalance(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawRebalanceWithCHI(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
