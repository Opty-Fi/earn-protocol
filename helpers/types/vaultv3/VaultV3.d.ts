/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultV3Interface extends ethers.utils.Interface {
  functions: {
    "adminCall(bytes[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceUT()": FunctionFragment;
    "blockToBlockVaultValues(uint256,uint256)": FunctionFragment;
    "calcDepositFeeUT(uint256)": FunctionFragment;
    "calcWithdrawalFeeUT(uint256)": FunctionFragment;
    "computeInvestStrategyHash(tuple[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getInvestStrategySteps()": FunctionFragment;
    "getLastStrategyStepBalanceLP(tuple[])": FunctionFragment;
    "getNextBestInvestStrategy()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,bytes32,string,string,uint256)": FunctionFragment;
    "investStrategyHash()": FunctionFragment;
    "investStrategySteps(uint256)": FunctionFragment;
    "isMaxVaultValueJumpAllowed(uint256,uint256)": FunctionFragment;
    "minimumDepositValueUT()": FunctionFragment;
    "name()": FunctionFragment;
    "opTOKEN_REVISION()": FunctionFragment;
    "pendingDeposits(address)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "rebalance()": FunctionFragment;
    "registryContract()": FunctionFragment;
    "setEmergencyShutdown(bool)": FunctionFragment;
    "setMinimumDepositValueUT(uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setRiskProfileCode(uint256)": FunctionFragment;
    "setTotalValueLockedLimitUT(uint256)": FunctionFragment;
    "setUnderlyingTokensHash(bytes32)": FunctionFragment;
    "setUnpaused(bool)": FunctionFragment;
    "setUserDepositCapUT(uint256)": FunctionFragment;
    "setValueControlParams(uint256,uint256,uint256)": FunctionFragment;
    "setVaultConfiguration(uint256)": FunctionFragment;
    "setWhitelistedAccountsRoot(bytes32)": FunctionFragment;
    "setWhitelistedCodesRoot(bytes32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalDeposits(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalValueLockedLimitUT()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "underlyingTokensHash()": FunctionFragment;
    "userDepositCapUT()": FunctionFragment;
    "userDepositPermitted(address,bool,uint256,uint256,bytes32[],bytes32[])": FunctionFragment;
    "userDepositVault(uint256,bytes32[],bytes32[])": FunctionFragment;
    "userWithdrawPermitted(address,uint256,bytes32[],bytes32[])": FunctionFragment;
    "userWithdrawVault(uint256,bytes32[],bytes32[])": FunctionFragment;
    "vaultConfiguration()": FunctionFragment;
    "vaultDepositAllToStrategy()": FunctionFragment;
    "vaultDepositPermitted()": FunctionFragment;
    "vaultWithdrawPermitted()": FunctionFragment;
    "whitelistedAccountsRoot()": FunctionFragment;
    "whitelistedCodesRoot()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adminCall", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
  encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "blockToBlockVaultValues", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "calcDepositFeeUT", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "calcWithdrawalFeeUT", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "computeInvestStrategyHash",
    values: [{ pool: string; outputToken: string; isBorrow: boolean }[]],
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getInvestStrategySteps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastStrategyStepBalanceLP",
    values: [{ pool: string; outputToken: string; isBorrow: boolean }[]],
  ): string;
  encodeFunctionData(functionFragment: "getNextBestInvestStrategy", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPricePerFullShare", values?: undefined): string;
  encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string, BytesLike, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "investStrategyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "investStrategySteps", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "isMaxVaultValueJumpAllowed", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "minimumDepositValueUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "opTOKEN_REVISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingDeposits", values: [string]): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "registryContract", values?: undefined): string;
  encodeFunctionData(functionFragment: "setEmergencyShutdown", values: [boolean]): string;
  encodeFunctionData(functionFragment: "setMinimumDepositValueUT", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(functionFragment: "setRiskProfileCode", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setTotalValueLockedLimitUT", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setUnderlyingTokensHash", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "setUnpaused", values: [boolean]): string;
  encodeFunctionData(functionFragment: "setUserDepositCapUT", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setValueControlParams",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "setVaultConfiguration", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setWhitelistedAccountsRoot", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "setWhitelistedCodesRoot", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDeposits", values: [string]): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalValueLockedLimitUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "underlyingToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "underlyingTokensHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositCapUT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDepositPermitted",
    values: [string, boolean, BigNumberish, BigNumberish, BytesLike[], BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "userDepositVault", values: [BigNumberish, BytesLike[], BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "userWithdrawPermitted",
    values: [string, BigNumberish, BytesLike[], BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: "userWithdrawVault", values: [BigNumberish, BytesLike[], BytesLike[]]): string;
  encodeFunctionData(functionFragment: "vaultConfiguration", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultDepositAllToStrategy", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultDepositPermitted", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultWithdrawPermitted", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelistedAccountsRoot", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelistedCodesRoot", values?: undefined): string;

  decodeFunctionResult(functionFragment: "adminCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blockToBlockVaultValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcDepositFeeUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcWithdrawalFeeUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "computeInvestStrategyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInvestStrategySteps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLastStrategyStepBalanceLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNextBestInvestStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPricePerFullShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategySteps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMaxVaultValueJumpAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimumDepositValueUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opTOKEN_REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEmergencyShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinimumDepositValueUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRiskProfileCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTotalValueLockedLimitUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUnderlyingTokensHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUnpaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUserDepositCapUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValueControlParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVaultConfiguration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWhitelistedAccountsRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWhitelistedCodesRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalValueLockedLimitUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlyingToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlyingTokensHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositCapUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositPermitted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawPermitted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultConfiguration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultDepositAllToStrategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultDepositPermitted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultWithdrawPermitted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedAccountsRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedCodesRoot", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LogEmergencyShutdown(bool,address)": EventFragment;
    "LogMinimumDepositValueUT(uint256,address)": EventFragment;
    "LogTotalValueLockedLimitUT(uint256,address)": EventFragment;
    "LogUnpause(bool,address)": EventFragment;
    "LogUserDepositCapUT(uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMinimumDepositValueUT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTotalValueLockedLimitUT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserDepositCapUT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type LogEmergencyShutdownEvent = TypedEvent<[boolean, string] & { emergencyShutdown: boolean; caller: string }>;

export type LogMinimumDepositValueUTEvent = TypedEvent<
  [BigNumber, string] & { minimumDepositValueUT: BigNumber; caller: string }
>;

export type LogTotalValueLockedLimitUTEvent = TypedEvent<
  [BigNumber, string] & { totalValueLockedLimitUT: BigNumber; caller: string }
>;

export type LogUnpauseEvent = TypedEvent<[boolean, string] & { unpaused: boolean; caller: string }>;

export type LogUserDepositCapUTEvent = TypedEvent<
  [BigNumber, string] & { userDepositCapUT: BigNumber; caller: string }
>;

export type TransferEvent = TypedEvent<[string, string, BigNumber] & { from: string; to: string; value: BigNumber }>;

export class VaultV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultV3Interface;

  functions: {
    adminCall(
      _codes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        actualVaultValue: BigNumber;
        blockMinVaultValue: BigNumber;
        blockMaxVaultValue: BigNumber;
      }
    >;

    calcDepositFeeUT(_userDepositUT: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    calcWithdrawalFeeUT(_userWithdrawUT: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    computeInvestStrategyHash(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getInvestStrategySteps(overrides?: CallOverrides): Promise<
      [
        ([string, string, boolean] & {
          pool: string;
          outputToken: string;
          isBorrow: boolean;
        })[],
      ]
    >;

    getLastStrategyStepBalanceLP(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getNextBestInvestStrategy(overrides?: CallOverrides): Promise<
      [
        ([string, string, boolean] & {
          pool: string;
          outputToken: string;
          isBorrow: boolean;
        })[],
      ]
    >;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _underlyingTokensHash: BytesLike,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    investStrategyHash(overrides?: CallOverrides): Promise<[string]>;

    investStrategySteps(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, boolean] & {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }
    >;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    registryContract(overrides?: CallOverrides): Promise<[string]>;

    setEmergencyShutdown(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinimumDepositValueUT(
      _minimumDepositValueUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTotalValueLockedLimitUT(
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnderlyingTokensHash(
      _underlyingTokensHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnpaused(
      _unpaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUserDepositCapUT(
      _userDepositCapUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setValueControlParams(
      _userDepositCapUT: BigNumberish,
      _minimumDepositValueUT: BigNumberish,
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVaultConfiguration(
      _vaultConfiguration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWhitelistedAccountsRoot(
      _whitelistedAccountsRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWhitelistedCodesRoot(
      _whitelistedCodesRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<[string]>;

    userDepositCapUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    userDepositPermitted(
      _user: string,
      _addUserDepositUT: boolean,
      _userDepositUTWithDeductions: BigNumberish,
      _deductions: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[boolean, string]>;

    userDepositVault(
      _userDepositUT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawPermitted(
      _user: string,
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[boolean, string]>;

    userWithdrawVault(
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vaultConfiguration(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultDepositAllToStrategy(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vaultDepositPermitted(overrides?: CallOverrides): Promise<[boolean, string]>;

    vaultWithdrawPermitted(overrides?: CallOverrides): Promise<[boolean, string]>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<[string]>;

    whitelistedCodesRoot(overrides?: CallOverrides): Promise<[string]>;
  };

  adminCall(
    _codes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceUT(overrides?: CallOverrides): Promise<BigNumber>;

  blockToBlockVaultValues(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      actualVaultValue: BigNumber;
      blockMinVaultValue: BigNumber;
      blockMaxVaultValue: BigNumber;
    }
  >;

  calcDepositFeeUT(_userDepositUT: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  calcWithdrawalFeeUT(_userWithdrawUT: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  computeInvestStrategyHash(
    _investStrategySteps: {
      pool: string;
      outputToken: string;
      isBorrow: boolean;
    }[],
    overrides?: CallOverrides,
  ): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getInvestStrategySteps(overrides?: CallOverrides): Promise<
    ([string, string, boolean] & {
      pool: string;
      outputToken: string;
      isBorrow: boolean;
    })[]
  >;

  getLastStrategyStepBalanceLP(
    _investStrategySteps: {
      pool: string;
      outputToken: string;
      isBorrow: boolean;
    }[],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getNextBestInvestStrategy(overrides?: CallOverrides): Promise<
    ([string, string, boolean] & {
      pool: string;
      outputToken: string;
      isBorrow: boolean;
    })[]
  >;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _underlyingTokensHash: BytesLike,
    _name: string,
    _symbol: string,
    _riskProfileCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  investStrategyHash(overrides?: CallOverrides): Promise<string>;

  investStrategySteps(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, boolean] & {
      pool: string;
      outputToken: string;
      isBorrow: boolean;
    }
  >;

  isMaxVaultValueJumpAllowed(
    _diff: BigNumberish,
    _currentVaultValue: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  minimumDepositValueUT(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  opTOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queue(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

  rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  registryContract(overrides?: CallOverrides): Promise<string>;

  setEmergencyShutdown(
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMinimumDepositValueUT(
    _minimumDepositValueUT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRiskProfileCode(
    _riskProfileCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTotalValueLockedLimitUT(
    _totalValueLockedLimitUT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnderlyingTokensHash(
    _underlyingTokensHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnpaused(
    _unpaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUserDepositCapUT(
    _userDepositCapUT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setValueControlParams(
    _userDepositCapUT: BigNumberish,
    _minimumDepositValueUT: BigNumberish,
    _totalValueLockedLimitUT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVaultConfiguration(
    _vaultConfiguration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWhitelistedAccountsRoot(
    _whitelistedAccountsRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWhitelistedCodesRoot(
    _whitelistedCodesRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalValueLockedLimitUT(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  underlyingTokensHash(overrides?: CallOverrides): Promise<string>;

  userDepositCapUT(overrides?: CallOverrides): Promise<BigNumber>;

  userDepositPermitted(
    _user: string,
    _addUserDepositUT: boolean,
    _userDepositUTWithDeductions: BigNumberish,
    _deductions: BigNumberish,
    _accountsProof: BytesLike[],
    _codesProof: BytesLike[],
    overrides?: CallOverrides,
  ): Promise<[boolean, string]>;

  userDepositVault(
    _userDepositUT: BigNumberish,
    _accountsProof: BytesLike[],
    _codesProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawPermitted(
    _user: string,
    _userWithdrawVT: BigNumberish,
    _accountsProof: BytesLike[],
    _codesProof: BytesLike[],
    overrides?: CallOverrides,
  ): Promise<[boolean, string]>;

  userWithdrawVault(
    _userWithdrawVT: BigNumberish,
    _accountsProof: BytesLike[],
    _codesProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vaultConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

  vaultDepositAllToStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  vaultDepositPermitted(overrides?: CallOverrides): Promise<[boolean, string]>;

  vaultWithdrawPermitted(overrides?: CallOverrides): Promise<[boolean, string]>;

  whitelistedAccountsRoot(overrides?: CallOverrides): Promise<string>;

  whitelistedCodesRoot(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adminCall(_codes: BytesLike[], overrides?: CallOverrides): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceUT(overrides?: CallOverrides): Promise<BigNumber>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        actualVaultValue: BigNumber;
        blockMinVaultValue: BigNumber;
        blockMaxVaultValue: BigNumber;
      }
    >;

    calcDepositFeeUT(_userDepositUT: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calcWithdrawalFeeUT(_userWithdrawUT: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    computeInvestStrategyHash(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getInvestStrategySteps(overrides?: CallOverrides): Promise<
      ([string, string, boolean] & {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      })[]
    >;

    getLastStrategyStepBalanceLP(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNextBestInvestStrategy(overrides?: CallOverrides): Promise<
      ([string, string, boolean] & {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      })[]
    >;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _registry: string,
      _underlyingTokensHash: BytesLike,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    investStrategyHash(overrides?: CallOverrides): Promise<string>;

    investStrategySteps(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, boolean] & {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }
    >;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    registryContract(overrides?: CallOverrides): Promise<string>;

    setEmergencyShutdown(_active: boolean, overrides?: CallOverrides): Promise<void>;

    setMinimumDepositValueUT(_minimumDepositValueUT: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    setRiskProfileCode(_riskProfileCode: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTotalValueLockedLimitUT(_totalValueLockedLimitUT: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUnderlyingTokensHash(_underlyingTokensHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    setUnpaused(_unpaused: boolean, overrides?: CallOverrides): Promise<void>;

    setUserDepositCapUT(_userDepositCapUT: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setValueControlParams(
      _userDepositCapUT: BigNumberish,
      _minimumDepositValueUT: BigNumberish,
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVaultConfiguration(_vaultConfiguration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWhitelistedAccountsRoot(_whitelistedAccountsRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    setWhitelistedCodesRoot(_whitelistedCodesRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<string>;

    userDepositCapUT(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositPermitted(
      _user: string,
      _addUserDepositUT: boolean,
      _userDepositUTWithDeductions: BigNumberish,
      _deductions: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[boolean, string]>;

    userDepositVault(
      _userDepositUT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    userWithdrawPermitted(
      _user: string,
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[boolean, string]>;

    userWithdrawVault(
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    vaultConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDepositAllToStrategy(overrides?: CallOverrides): Promise<void>;

    vaultDepositPermitted(overrides?: CallOverrides): Promise<[boolean, string]>;

    vaultWithdrawPermitted(overrides?: CallOverrides): Promise<[boolean, string]>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<string>;

    whitelistedCodesRoot(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

    "LogEmergencyShutdown(bool,address)"(
      emergencyShutdown?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[boolean, string], { emergencyShutdown: boolean; caller: string }>;

    LogEmergencyShutdown(
      emergencyShutdown?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[boolean, string], { emergencyShutdown: boolean; caller: string }>;

    "LogMinimumDepositValueUT(uint256,address)"(
      minimumDepositValueUT?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[BigNumber, string], { minimumDepositValueUT: BigNumber; caller: string }>;

    LogMinimumDepositValueUT(
      minimumDepositValueUT?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[BigNumber, string], { minimumDepositValueUT: BigNumber; caller: string }>;

    "LogTotalValueLockedLimitUT(uint256,address)"(
      totalValueLockedLimitUT?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[BigNumber, string], { totalValueLockedLimitUT: BigNumber; caller: string }>;

    LogTotalValueLockedLimitUT(
      totalValueLockedLimitUT?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[BigNumber, string], { totalValueLockedLimitUT: BigNumber; caller: string }>;

    "LogUnpause(bool,address)"(
      unpaused?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[boolean, string], { unpaused: boolean; caller: string }>;

    LogUnpause(
      unpaused?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[boolean, string], { unpaused: boolean; caller: string }>;

    "LogUserDepositCapUT(uint256,address)"(
      userDepositCapUT?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[BigNumber, string], { userDepositCapUT: BigNumber; caller: string }>;

    LogUserDepositCapUT(
      userDepositCapUT?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[BigNumber, string], { userDepositCapUT: BigNumber; caller: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
  };

  estimateGas: {
    adminCall(_codes: BytesLike[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceUT(overrides?: CallOverrides): Promise<BigNumber>;

    blockToBlockVaultValues(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calcDepositFeeUT(_userDepositUT: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calcWithdrawalFeeUT(_userWithdrawUT: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    computeInvestStrategyHash(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getInvestStrategySteps(overrides?: CallOverrides): Promise<BigNumber>;

    getLastStrategyStepBalanceLP(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNextBestInvestStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _underlyingTokensHash: BytesLike,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    investStrategyHash(overrides?: CallOverrides): Promise<BigNumber>;

    investStrategySteps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    registryContract(overrides?: CallOverrides): Promise<BigNumber>;

    setEmergencyShutdown(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMinimumDepositValueUT(
      _minimumDepositValueUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTotalValueLockedLimitUT(
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUnderlyingTokensHash(
      _underlyingTokensHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUnpaused(_unpaused: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUserDepositCapUT(
      _userDepositCapUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setValueControlParams(
      _userDepositCapUT: BigNumberish,
      _minimumDepositValueUT: BigNumberish,
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVaultConfiguration(
      _vaultConfiguration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWhitelistedAccountsRoot(
      _whitelistedAccountsRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWhitelistedCodesRoot(
      _whitelistedCodesRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositCapUT(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositPermitted(
      _user: string,
      _addUserDepositUT: boolean,
      _userDepositUTWithDeductions: BigNumberish,
      _deductions: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userDepositVault(
      _userDepositUT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userWithdrawPermitted(
      _user: string,
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userWithdrawVault(
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vaultConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDepositAllToStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    vaultDepositPermitted(overrides?: CallOverrides): Promise<BigNumber>;

    vaultWithdrawPermitted(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedCodesRoot(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adminCall(
      _codes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calcDepositFeeUT(_userDepositUT: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcWithdrawalFeeUT(_userWithdrawUT: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeInvestStrategyHash(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getInvestStrategySteps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastStrategyStepBalanceLP(
      _investStrategySteps: {
        pool: string;
        outputToken: string;
        isBorrow: boolean;
      }[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNextBestInvestStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _underlyingTokensHash: BytesLike,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    investStrategyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investStrategySteps(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    minimumDepositValueUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    registryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmergencyShutdown(
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMinimumDepositValueUT(
      _minimumDepositValueUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTotalValueLockedLimitUT(
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnderlyingTokensHash(
      _underlyingTokensHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnpaused(
      _unpaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUserDepositCapUT(
      _userDepositCapUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setValueControlParams(
      _userDepositCapUT: BigNumberish,
      _minimumDepositValueUT: BigNumberish,
      _totalValueLockedLimitUT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVaultConfiguration(
      _vaultConfiguration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelistedAccountsRoot(
      _whitelistedAccountsRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelistedCodesRoot(
      _whitelistedCodesRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValueLockedLimitUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingTokensHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDepositCapUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDepositPermitted(
      _user: string,
      _addUserDepositUT: boolean,
      _userDepositUTWithDeductions: BigNumberish,
      _deductions: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userDepositVault(
      _userDepositUT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawPermitted(
      _user: string,
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userWithdrawVault(
      _userWithdrawVT: BigNumberish,
      _accountsProof: BytesLike[],
      _codesProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vaultConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultDepositAllToStrategy(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vaultDepositPermitted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultWithdrawPermitted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedAccountsRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedCodesRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
