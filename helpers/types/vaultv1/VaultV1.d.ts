/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VaultV1Interface extends ethers.utils.Interface {
  functions: {
    "adminCall(bytes[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blockToBlockVaultValues(uint256,uint256)": FunctionFragment;
    "chi()": FunctionFragment;
    "chiDeploy(bytes)": FunctionFragment;
    "chiDeploy2(uint256,bytes)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositQueue()": FunctionFragment;
    "discontinue()": FunctionFragment;
    "executeCode(bytes,string)": FunctionFragment;
    "executeCodes(bytes[],string)": FunctionFragment;
    "gasOwedToOperator()": FunctionFragment;
    "getDepositQueue()": FunctionFragment;
    "getPricePerFullShare()": FunctionFragment;
    "getPricePerFullShareWrite()": FunctionFragment;
    "gst()": FunctionFragment;
    "gstDeploy(bytes)": FunctionFragment;
    "gstDeploy2(uint256,bytes)": FunctionFragment;
    "harvest(bytes32)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,string,string,uint256)": FunctionFragment;
    "investStrategyHash()": FunctionFragment;
    "isMaxVaultValueJumpAllowed(uint256,uint256)": FunctionFragment;
    "maxVaultValueJump()": FunctionFragment;
    "name()": FunctionFragment;
    "opTOKEN_REVISION()": FunctionFragment;
    "pendingDeposits(address)": FunctionFragment;
    "pricePerShareWrite()": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "rebalance()": FunctionFragment;
    "registryContract()": FunctionFragment;
    "riskProfileCode()": FunctionFragment;
    "setMaxVaultValueJump(uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setRiskProfileCode(uint256)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "setUnpaused(bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalDeposits(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "userDeposit(uint256)": FunctionFragment;
    "userDepositAll()": FunctionFragment;
    "userDepositAllRebalance()": FunctionFragment;
    "userDepositAllRebalanceWithCHI()": FunctionFragment;
    "userDepositAllWithCHI()": FunctionFragment;
    "userDepositRebalance(uint256)": FunctionFragment;
    "userDepositRebalanceWithCHI(uint256)": FunctionFragment;
    "userDepositWithCHI(uint256)": FunctionFragment;
    "userWithdrawAllRebalance()": FunctionFragment;
    "userWithdrawAllRebalanceWithCHI()": FunctionFragment;
    "userWithdrawRebalance(uint256)": FunctionFragment;
    "userWithdrawRebalanceWithCHI(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adminCall", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
  encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "blockToBlockVaultValues", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "chi", values?: undefined): string;
  encodeFunctionData(functionFragment: "chiDeploy", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "chiDeploy2", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "depositQueue", values?: undefined): string;
  encodeFunctionData(functionFragment: "discontinue", values?: undefined): string;
  encodeFunctionData(functionFragment: "executeCode", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "executeCodes", values: [BytesLike[], string]): string;
  encodeFunctionData(functionFragment: "gasOwedToOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDepositQueue", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPricePerFullShare", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPricePerFullShareWrite", values?: undefined): string;
  encodeFunctionData(functionFragment: "gst", values?: undefined): string;
  encodeFunctionData(functionFragment: "gstDeploy", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "gstDeploy2", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "harvest", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string, string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "investStrategyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "isMaxVaultValueJumpAllowed", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "maxVaultValueJump", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "opTOKEN_REVISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingDeposits", values: [string]): string;
  encodeFunctionData(functionFragment: "pricePerShareWrite", values?: undefined): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "registryContract", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskProfileCode", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMaxVaultValueJump", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(functionFragment: "setRiskProfileCode", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(functionFragment: "setUnpaused", values: [boolean]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDeposits", values: [string]): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "underlyingToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDeposit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userDepositAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositAllRebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositAllRebalanceWithCHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositAllWithCHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "userDepositRebalance", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userDepositRebalanceWithCHI", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userDepositWithCHI", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userWithdrawAllRebalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "userWithdrawAllRebalanceWithCHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "userWithdrawRebalance", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "userWithdrawRebalanceWithCHI", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "adminCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blockToBlockVaultValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chiDeploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chiDeploy2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "discontinue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeCodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasOwedToOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDepositQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPricePerFullShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPricePerFullShareWrite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gstDeploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gstDeploy2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMaxVaultValueJumpAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxVaultValueJump", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opTOKEN_REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pricePerShareWrite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskProfileCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxVaultValueJump", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRiskProfileCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUnpaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlyingToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAllRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAllRebalanceWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositAllWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositRebalanceWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userDepositWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawAllRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawAllRebalanceWithCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userWithdrawRebalanceWithCHI", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DepositQueue(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type DepositQueueEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    index: BigNumber;
    amount: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<[string, string, BigNumber] & { from: string; to: string; value: BigNumber }>;

export class VaultV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultV1Interface;

  functions: {
    adminCall(
      _codes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        actualVaultValue: BigNumber;
        blockMinVaultValue: BigNumber;
        blockMaxVaultValue: BigNumber;
      }
    >;

    chi(overrides?: CallOverrides): Promise<[string]>;

    chiDeploy(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    chiDeploy2(
      salt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositQueue(overrides?: CallOverrides): Promise<[BigNumber]>;

    discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    executeCode(
      _code: BytesLike,
      _errorMsg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeCodes(
      _codes: BytesLike[],
      _errorMsg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    gasOwedToOperator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositQueue(
      overrides?: CallOverrides,
    ): Promise<[([string, BigNumber] & { account: string; value: BigNumber })[]]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricePerFullShareWrite(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    gst(overrides?: CallOverrides): Promise<[string]>;

    gstDeploy(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    gstDeploy2(
      salt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    harvest(
      _investStrategyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _underlyingToken: string,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    investStrategyHash(overrides?: CallOverrides): Promise<[string]>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    maxVaultValueJump(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePerShareWrite(overrides?: CallOverrides): Promise<[BigNumber]>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    registryContract(overrides?: CallOverrides): Promise<[string]>;

    riskProfileCode(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxVaultValueJump(
      _maxVaultValueJump: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setToken(
      _underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnpaused(
      _unpaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDepositAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userDepositRebalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositRebalanceWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userDepositWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userWithdrawAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawRebalance(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userWithdrawRebalanceWithCHI(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  adminCall(
    _codes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blockToBlockVaultValues(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      actualVaultValue: BigNumber;
      blockMinVaultValue: BigNumber;
      blockMaxVaultValue: BigNumber;
    }
  >;

  chi(overrides?: CallOverrides): Promise<string>;

  chiDeploy(data: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  chiDeploy2(
    salt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositQueue(overrides?: CallOverrides): Promise<BigNumber>;

  discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  executeCode(
    _code: BytesLike,
    _errorMsg: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeCodes(
    _codes: BytesLike[],
    _errorMsg: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  gasOwedToOperator(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositQueue(overrides?: CallOverrides): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  getPricePerFullShareWrite(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  gst(overrides?: CallOverrides): Promise<string>;

  gstDeploy(data: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  gstDeploy2(
    salt: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  harvest(
    _investStrategyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _underlyingToken: string,
    _name: string,
    _symbol: string,
    _riskProfileCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  investStrategyHash(overrides?: CallOverrides): Promise<string>;

  isMaxVaultValueJumpAllowed(
    _diff: BigNumberish,
    _currentVaultValue: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  maxVaultValueJump(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  opTOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pricePerShareWrite(overrides?: CallOverrides): Promise<BigNumber>;

  queue(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

  rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  registryContract(overrides?: CallOverrides): Promise<string>;

  riskProfileCode(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxVaultValueJump(
    _maxVaultValueJump: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRiskProfileCode(
    _riskProfileCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setToken(
    _underlyingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnpaused(
    _unpaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  userDeposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDepositAllRebalanceWithCHI(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userDepositRebalance(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositRebalanceWithCHI(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userDepositWithCHI(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userWithdrawAllRebalanceWithCHI(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawRebalance(
    _redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userWithdrawRebalanceWithCHI(
    _redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    adminCall(_codes: BytesLike[], overrides?: CallOverrides): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        actualVaultValue: BigNumber;
        blockMinVaultValue: BigNumber;
        blockMaxVaultValue: BigNumber;
      }
    >;

    chi(overrides?: CallOverrides): Promise<string>;

    chiDeploy(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    chiDeploy2(salt: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    depositQueue(overrides?: CallOverrides): Promise<BigNumber>;

    discontinue(overrides?: CallOverrides): Promise<void>;

    executeCode(_code: BytesLike, _errorMsg: string, overrides?: CallOverrides): Promise<void>;

    executeCodes(_codes: BytesLike[], _errorMsg: string, overrides?: CallOverrides): Promise<void>;

    gasOwedToOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositQueue(
      overrides?: CallOverrides,
    ): Promise<([string, BigNumber] & { account: string; value: BigNumber })[]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShareWrite(overrides?: CallOverrides): Promise<BigNumber>;

    gst(overrides?: CallOverrides): Promise<string>;

    gstDeploy(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    gstDeploy2(salt: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<string>;

    harvest(_investStrategyHash: BytesLike, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _registry: string,
      _underlyingToken: string,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    investStrategyHash(overrides?: CallOverrides): Promise<string>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    maxVaultValueJump(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShareWrite(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { account: string; value: BigNumber }>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    registryContract(overrides?: CallOverrides): Promise<string>;

    riskProfileCode(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxVaultValueJump(_maxVaultValueJump: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    setRiskProfileCode(_riskProfileCode: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setToken(_underlyingToken: string, overrides?: CallOverrides): Promise<void>;

    setUnpaused(_unpaused: boolean, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    userDeposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userDepositAll(overrides?: CallOverrides): Promise<void>;

    userDepositAllRebalance(overrides?: CallOverrides): Promise<void>;

    userDepositAllRebalanceWithCHI(overrides?: CallOverrides): Promise<void>;

    userDepositAllWithCHI(overrides?: CallOverrides): Promise<void>;

    userDepositRebalance(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userDepositRebalanceWithCHI(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userDepositWithCHI(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userWithdrawAllRebalance(overrides?: CallOverrides): Promise<void>;

    userWithdrawAllRebalanceWithCHI(overrides?: CallOverrides): Promise<void>;

    userWithdrawRebalance(_redeemAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userWithdrawRebalanceWithCHI(_redeemAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

    "DepositQueue(address,uint256,uint256)"(
      sender?: string | null,
      index?: BigNumberish | null,
      amount?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber, BigNumber], { sender: string; index: BigNumber; amount: BigNumber }>;

    DepositQueue(
      sender?: string | null,
      index?: BigNumberish | null,
      amount?: BigNumberish | null,
    ): TypedEventFilter<[string, BigNumber, BigNumber], { sender: string; index: BigNumber; amount: BigNumber }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
  };

  estimateGas: {
    adminCall(_codes: BytesLike[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockToBlockVaultValues(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    chi(overrides?: CallOverrides): Promise<BigNumber>;

    chiDeploy(data: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    chiDeploy2(
      salt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositQueue(overrides?: CallOverrides): Promise<BigNumber>;

    discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    executeCode(
      _code: BytesLike,
      _errorMsg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeCodes(
      _codes: BytesLike[],
      _errorMsg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    gasOwedToOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositQueue(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShareWrite(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    gst(overrides?: CallOverrides): Promise<BigNumber>;

    gstDeploy(data: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    gstDeploy2(
      salt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    harvest(
      _investStrategyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _underlyingToken: string,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    investStrategyHash(overrides?: CallOverrides): Promise<BigNumber>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxVaultValueJump(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShareWrite(overrides?: CallOverrides): Promise<BigNumber>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    registryContract(overrides?: CallOverrides): Promise<BigNumber>;

    riskProfileCode(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxVaultValueJump(
      _maxVaultValueJump: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setToken(_underlyingToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUnpaused(_unpaused: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    userDeposit(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAllRebalanceWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userDepositRebalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userDepositRebalanceWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userDepositWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userWithdrawAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userWithdrawAllRebalanceWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userWithdrawRebalance(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userWithdrawRebalanceWithCHI(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminCall(
      _codes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockToBlockVaultValues(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    chi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chiDeploy(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    chiDeploy2(
      salt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discontinue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    executeCode(
      _code: BytesLike,
      _errorMsg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeCodes(
      _codes: BytesLike[],
      _errorMsg: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    gasOwedToOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShareWrite(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    gst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gstDeploy(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    gstDeploy2(
      salt: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    harvest(
      _investStrategyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _underlyingToken: string,
      _name: string,
      _symbol: string,
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    investStrategyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMaxVaultValueJumpAllowed(
      _diff: BigNumberish,
      _currentVaultValue: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxVaultValueJump(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opTOKEN_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerShareWrite(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    registryContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskProfileCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxVaultValueJump(
      _maxVaultValueJump: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRiskProfileCode(
      _riskProfileCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setToken(
      _underlyingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnpaused(
      _unpaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDepositAllRebalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDepositAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositAllWithCHI(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userDepositRebalance(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositRebalanceWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userDepositWithCHI(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawAllRebalance(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawAllRebalanceWithCHI(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawRebalance(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userWithdrawRebalanceWithCHI(
      _redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
