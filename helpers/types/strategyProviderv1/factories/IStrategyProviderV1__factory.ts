/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IStrategyProviderV1, IStrategyProviderV1Interface } from "../IStrategyProviderV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_riskProfileCode",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_underlyingTokensHash",
        type: "bytes32",
      },
    ],
    name: "getRpToTokenToBestStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isBorrow",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.StrategyStep[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_riskProfileCode",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_underlyingTokensHash",
        type: "bytes32",
      },
    ],
    name: "getRpToTokenToDefaultStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isBorrow",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.StrategyStep[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_vaultRewardTokenHash",
        type: "bytes32",
      },
    ],
    name: "getVaultRewardTokenHashToVaultRewardTokenStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "hold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "convert",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.VaultRewardStrategy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_riskProfileCode",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_underlyingTokensHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isBorrow",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.StrategyStep[]",
        name: "_strategySteps",
        type: "tuple[]",
      },
    ],
    name: "setBestDefaultStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_riskProfileCode",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_underlyingTokensHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "pool",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isBorrow",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.StrategyStep[]",
        name: "_strategySteps",
        type: "tuple[]",
      },
    ],
    name: "setBestStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_vaultRewardTokenHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "hold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "convert",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.VaultRewardStrategy",
        name: "_vaultRewardStrategy",
        type: "tuple",
      },
    ],
    name: "setVaultRewardStrategy",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "hold",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "convert",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.VaultRewardStrategy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IStrategyProviderV1__factory {
  static readonly abi = _abi;
  static createInterface(): IStrategyProviderV1Interface {
    return new utils.Interface(_abi) as IStrategyProviderV1Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IStrategyProviderV1 {
    return new Contract(address, _abi, signerOrProvider) as IStrategyProviderV1;
  }
}
