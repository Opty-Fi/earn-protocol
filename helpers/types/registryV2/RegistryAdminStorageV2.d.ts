/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RegistryAdminStorageV2Interface extends ethers.utils.Interface {
  functions: {
    "financeOperator()": FunctionFragment;
    "governance()": FunctionFragment;
    "operator()": FunctionFragment;
    "optyDistributor()": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "pendingRegistryImplementation()": FunctionFragment;
    "registryImplementation()": FunctionFragment;
    "riskOperator()": FunctionFragment;
    "strategyOperator()": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "financeOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "governance", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "optyDistributor", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingGovernance", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingRegistryImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "registryImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategyOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "financeOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optyDistributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGovernance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingRegistryImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "TransferFinanceOperator(address,address)": EventFragment;
    "TransferOPTYDistributor(address,address)": EventFragment;
    "TransferOperator(address,address)": EventFragment;
    "TransferRiskOperator(address,address)": EventFragment;
    "TransferStrategyOperator(address,address)": EventFragment;
    "TransferTreasury(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransferFinanceOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOPTYDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRiskOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferStrategyOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTreasury"): EventFragment;
}

export type TransferFinanceOperatorEvent = TypedEvent<[string, string] & { financeOperator: string; caller: string }>;

export type TransferOPTYDistributorEvent = TypedEvent<[string, string] & { optyDistributor: string; caller: string }>;

export type TransferOperatorEvent = TypedEvent<[string, string] & { operator: string; caller: string }>;

export type TransferRiskOperatorEvent = TypedEvent<[string, string] & { riskOperator: string; caller: string }>;

export type TransferStrategyOperatorEvent = TypedEvent<[string, string] & { strategyOperator: string; caller: string }>;

export type TransferTreasuryEvent = TypedEvent<[string, string] & { treasury: string; caller: string }>;

export class RegistryAdminStorageV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryAdminStorageV2Interface;

  functions: {
    financeOperator(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    optyDistributor(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<[string]>;

    registryImplementation(overrides?: CallOverrides): Promise<[string]>;

    riskOperator(overrides?: CallOverrides): Promise<[string]>;

    strategyOperator(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  financeOperator(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  optyDistributor(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pendingRegistryImplementation(overrides?: CallOverrides): Promise<string>;

  registryImplementation(overrides?: CallOverrides): Promise<string>;

  riskOperator(overrides?: CallOverrides): Promise<string>;

  strategyOperator(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    financeOperator(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    optyDistributor(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<string>;

    registryImplementation(overrides?: CallOverrides): Promise<string>;

    riskOperator(overrides?: CallOverrides): Promise<string>;

    strategyOperator(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TransferFinanceOperator(address,address)"(
      financeOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { financeOperator: string; caller: string }>;

    TransferFinanceOperator(
      financeOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { financeOperator: string; caller: string }>;

    "TransferOPTYDistributor(address,address)"(
      optyDistributor?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { optyDistributor: string; caller: string }>;

    TransferOPTYDistributor(
      optyDistributor?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { optyDistributor: string; caller: string }>;

    "TransferOperator(address,address)"(
      operator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { operator: string; caller: string }>;

    TransferOperator(
      operator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { operator: string; caller: string }>;

    "TransferRiskOperator(address,address)"(
      riskOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { riskOperator: string; caller: string }>;

    TransferRiskOperator(
      riskOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { riskOperator: string; caller: string }>;

    "TransferStrategyOperator(address,address)"(
      strategyOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { strategyOperator: string; caller: string }>;

    TransferStrategyOperator(
      strategyOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { strategyOperator: string; caller: string }>;

    "TransferTreasury(address,address)"(
      treasury?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { treasury: string; caller: string }>;

    TransferTreasury(
      treasury?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { treasury: string; caller: string }>;
  };

  estimateGas: {
    financeOperator(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    optyDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    registryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    riskOperator(overrides?: CallOverrides): Promise<BigNumber>;

    strategyOperator(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    financeOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optyDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registryImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
