/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RegistryStorageV2Interface extends ethers.utils.Interface {
  functions: {
    "aprOracle()": FunctionFragment;
    "financeOperator()": FunctionFragment;
    "governance()": FunctionFragment;
    "harvestCodeProvider()": FunctionFragment;
    "investStrategyRegistry()": FunctionFragment;
    "liquidityPoolToAdapter(address)": FunctionFragment;
    "liquidityPools(address)": FunctionFragment;
    "odefiVaultBooster()": FunctionFragment;
    "operator()": FunctionFragment;
    "opty()": FunctionFragment;
    "optyDistributor()": FunctionFragment;
    "optyStakingRateBalancer()": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "pendingRegistryImplementation()": FunctionFragment;
    "registryImplementation()": FunctionFragment;
    "riskManager()": FunctionFragment;
    "riskOperator()": FunctionFragment;
    "riskProfilesArray(uint256)": FunctionFragment;
    "strategyManager()": FunctionFragment;
    "strategyOperator()": FunctionFragment;
    "strategyProvider()": FunctionFragment;
    "swapPools(address)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "tokensHashIndexes(uint256)": FunctionFragment;
    "tokensHashToTokens(bytes32)": FunctionFragment;
    "treasury()": FunctionFragment;
    "vaultToVaultConfiguration(address)": FunctionFragment;
    "whitelistedUsers(address,address)": FunctionFragment;
    "withdrawalFeeRange()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "aprOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "financeOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "governance", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvestCodeProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "investStrategyRegistry", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidityPoolToAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "liquidityPools", values: [string]): string;
  encodeFunctionData(functionFragment: "odefiVaultBooster", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "opty", values?: undefined): string;
  encodeFunctionData(functionFragment: "optyDistributor", values?: undefined): string;
  encodeFunctionData(functionFragment: "optyStakingRateBalancer", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingGovernance", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingRegistryImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "registryImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskProfilesArray", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "strategyManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategyOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategyProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapPools", values: [string]): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(functionFragment: "tokensHashIndexes", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tokensHashToTokens", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultToVaultConfiguration", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelistedUsers", values: [string, string]): string;
  encodeFunctionData(functionFragment: "withdrawalFeeRange", values?: undefined): string;

  decodeFunctionResult(functionFragment: "aprOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "financeOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestCodeProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategyRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "odefiVaultBooster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optyDistributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optyStakingRateBalancer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGovernance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingRegistryImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskProfilesArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensHashIndexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensHashToTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultToVaultConfiguration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawalFeeRange", data: BytesLike): Result;

  events: {
    "LogAllowWhitelistedStateVault(address,bool,address)": EventFragment;
    "LogDiscontinueVault(address,bool,address)": EventFragment;
    "LogLimitStateVault(address,bool,address)": EventFragment;
    "LogLiquidityPool(address,bool,address)": EventFragment;
    "LogLiquidityPoolToAdapter(address,address,address)": EventFragment;
    "LogMinimumDepositAmountVault(address,uint256,address)": EventFragment;
    "LogQueueCapVault(address,uint256,address)": EventFragment;
    "LogRPPoolRatings(uint256,uint8,uint8,address)": EventFragment;
    "LogRateLiquidityPool(address,uint8,address)": EventFragment;
    "LogRateSwapPool(address,uint8,address)": EventFragment;
    "LogRiskProfile(uint256,bool,bool,address)": EventFragment;
    "LogSwapPool(address,bool,address)": EventFragment;
    "LogToken(address,bool,address)": EventFragment;
    "LogTokensToTokensHash(bytes32,address)": EventFragment;
    "LogUnpauseVault(address,bool,address)": EventFragment;
    "LogUserDepositCapVault(address,uint256,address)": EventFragment;
    "LogVaultTotalValueLockedLimitInUnderlying(address,uint256,address)": EventFragment;
    "TransferFinanceOperator(address,address)": EventFragment;
    "TransferOPTYDistributor(address,address)": EventFragment;
    "TransferOperator(address,address)": EventFragment;
    "TransferRiskOperator(address,address)": EventFragment;
    "TransferStrategyOperator(address,address)": EventFragment;
    "TransferTreasury(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAllowWhitelistedStateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDiscontinueVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLimitStateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidityPoolToAdapter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMinimumDepositAmountVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogQueueCapVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRPPoolRatings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRateLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRateSwapPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSwapPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokensToTokensHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnpauseVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserDepositCapVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVaultTotalValueLockedLimitInUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFinanceOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOPTYDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRiskOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferStrategyOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTreasury"): EventFragment;
}

export type LogAllowWhitelistedStateVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    allowWhitelistedState: boolean;
    caller: string;
  }
>;

export type LogDiscontinueVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    discontinued: boolean;
    caller: string;
  }
>;

export type LogLimitStateVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    isLimitedState: boolean;
    caller: string;
  }
>;

export type LogLiquidityPoolEvent = TypedEvent<
  [string, boolean, string] & { pool: string; enabled: boolean; caller: string }
>;

export type LogLiquidityPoolToAdapterEvent = TypedEvent<
  [string, string, string] & { pool: string; adapter: string; caller: string }
>;

export type LogMinimumDepositAmountVaultEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    minimumDepositAmount: BigNumber;
    caller: string;
  }
>;

export type LogQueueCapVaultEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    queueCap: BigNumber;
    caller: string;
  }
>;

export type LogRPPoolRatingsEvent = TypedEvent<
  [BigNumber, number, number, string] & {
    index: BigNumber;
    lowerLimit: number;
    upperLimit: number;
    caller: string;
  }
>;

export type LogRateLiquidityPoolEvent = TypedEvent<
  [string, number, string] & { pool: string; rate: number; caller: string }
>;

export type LogRateSwapPoolEvent = TypedEvent<
  [string, number, string] & { pool: string; rate: number; caller: string }
>;

export type LogRiskProfileEvent = TypedEvent<
  [BigNumber, boolean, boolean, string] & {
    index: BigNumber;
    exists: boolean;
    canBorrow: boolean;
    caller: string;
  }
>;

export type LogSwapPoolEvent = TypedEvent<
  [string, boolean, string] & { pool: string; enabled: boolean; caller: string }
>;

export type LogTokenEvent = TypedEvent<
  [string, boolean, string] & {
    token: string;
    enabled: boolean;
    caller: string;
  }
>;

export type LogTokensToTokensHashEvent = TypedEvent<[string, string] & { tokensHash: string; caller: string }>;

export type LogUnpauseVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    unpaused: boolean;
    caller: string;
  }
>;

export type LogUserDepositCapVaultEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    userDepositCap: BigNumber;
    caller: string;
  }
>;

export type LogVaultTotalValueLockedLimitInUnderlyingEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    totalValueLockedLimitInUnderlying: BigNumber;
    caller: string;
  }
>;

export type TransferFinanceOperatorEvent = TypedEvent<[string, string] & { financeOperator: string; caller: string }>;

export type TransferOPTYDistributorEvent = TypedEvent<[string, string] & { optyDistributor: string; caller: string }>;

export type TransferOperatorEvent = TypedEvent<[string, string] & { operator: string; caller: string }>;

export type TransferRiskOperatorEvent = TypedEvent<[string, string] & { riskOperator: string; caller: string }>;

export type TransferStrategyOperatorEvent = TypedEvent<[string, string] & { strategyOperator: string; caller: string }>;

export type TransferTreasuryEvent = TypedEvent<[string, string] & { treasury: string; caller: string }>;

export class RegistryStorageV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryStorageV2Interface;

  functions: {
    aprOracle(overrides?: CallOverrides): Promise<[string]>;

    financeOperator(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<[string]>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<[string]>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    liquidityPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    opty(overrides?: CallOverrides): Promise<[string]>;

    optyDistributor(overrides?: CallOverrides): Promise<[string]>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<[string]>;

    registryImplementation(overrides?: CallOverrides): Promise<[string]>;

    riskManager(overrides?: CallOverrides): Promise<[string]>;

    riskOperator(overrides?: CallOverrides): Promise<[string]>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    strategyManager(overrides?: CallOverrides): Promise<[string]>;

    strategyOperator(overrides?: CallOverrides): Promise<[string]>;

    strategyProvider(overrides?: CallOverrides): Promise<[string]>;

    swapPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & { index: BigNumber }>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    vaultToVaultConfiguration(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        discontinued: boolean;
        unpaused: boolean;
        isLimitedState: boolean;
        allowWhitelistedState: boolean;
        withdrawalFee: BigNumber;
        userDepositCap: BigNumber;
        minimumDepositAmount: BigNumber;
        totalValueLockedLimitInUnderlying: BigNumber;
        queueCap: BigNumber;
      }
    >;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawalFeeRange(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lowerLimit: BigNumber; upperLimit: BigNumber }>;
  };

  aprOracle(overrides?: CallOverrides): Promise<string>;

  financeOperator(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  harvestCodeProvider(overrides?: CallOverrides): Promise<string>;

  investStrategyRegistry(overrides?: CallOverrides): Promise<string>;

  liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<string>;

  liquidityPools(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  odefiVaultBooster(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  opty(overrides?: CallOverrides): Promise<string>;

  optyDistributor(overrides?: CallOverrides): Promise<string>;

  optyStakingRateBalancer(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pendingRegistryImplementation(overrides?: CallOverrides): Promise<string>;

  registryImplementation(overrides?: CallOverrides): Promise<string>;

  riskManager(overrides?: CallOverrides): Promise<string>;

  riskOperator(overrides?: CallOverrides): Promise<string>;

  riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  strategyManager(overrides?: CallOverrides): Promise<string>;

  strategyOperator(overrides?: CallOverrides): Promise<string>;

  strategyProvider(overrides?: CallOverrides): Promise<string>;

  swapPools(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  tokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  vaultToVaultConfiguration(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      discontinued: boolean;
      unpaused: boolean;
      isLimitedState: boolean;
      allowWhitelistedState: boolean;
      withdrawalFee: BigNumber;
      userDepositCap: BigNumber;
      minimumDepositAmount: BigNumber;
      totalValueLockedLimitInUnderlying: BigNumber;
      queueCap: BigNumber;
    }
  >;

  whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawalFeeRange(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { lowerLimit: BigNumber; upperLimit: BigNumber }>;

  callStatic: {
    aprOracle(overrides?: CallOverrides): Promise<string>;

    financeOperator(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<string>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<string>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<string>;

    liquidityPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    opty(overrides?: CallOverrides): Promise<string>;

    optyDistributor(overrides?: CallOverrides): Promise<string>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<string>;

    registryImplementation(overrides?: CallOverrides): Promise<string>;

    riskManager(overrides?: CallOverrides): Promise<string>;

    riskOperator(overrides?: CallOverrides): Promise<string>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    strategyManager(overrides?: CallOverrides): Promise<string>;

    strategyOperator(overrides?: CallOverrides): Promise<string>;

    strategyProvider(overrides?: CallOverrides): Promise<string>;

    swapPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    vaultToVaultConfiguration(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        discontinued: boolean;
        unpaused: boolean;
        isLimitedState: boolean;
        allowWhitelistedState: boolean;
        withdrawalFee: BigNumber;
        userDepositCap: BigNumber;
        minimumDepositAmount: BigNumber;
        totalValueLockedLimitInUnderlying: BigNumber;
        queueCap: BigNumber;
      }
    >;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

    withdrawalFeeRange(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lowerLimit: BigNumber; upperLimit: BigNumber }>;
  };

  filters: {
    "LogAllowWhitelistedStateVault(address,bool,address)"(
      vault?: string | null,
      allowWhitelistedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; allowWhitelistedState: boolean; caller: string }>;

    LogAllowWhitelistedStateVault(
      vault?: string | null,
      allowWhitelistedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; allowWhitelistedState: boolean; caller: string }>;

    "LogDiscontinueVault(address,bool,address)"(
      vault?: string | null,
      discontinued?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; discontinued: boolean; caller: string }>;

    LogDiscontinueVault(
      vault?: string | null,
      discontinued?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; discontinued: boolean; caller: string }>;

    "LogLimitStateVault(address,bool,address)"(
      vault?: string | null,
      isLimitedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; isLimitedState: boolean; caller: string }>;

    LogLimitStateVault(
      vault?: string | null,
      isLimitedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; isLimitedState: boolean; caller: string }>;

    "LogLiquidityPool(address,bool,address)"(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    LogLiquidityPool(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    "LogLiquidityPoolToAdapter(address,address,address)"(
      pool?: string | null,
      adapter?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string, string], { pool: string; adapter: string; caller: string }>;

    LogLiquidityPoolToAdapter(
      pool?: string | null,
      adapter?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string, string], { pool: string; adapter: string; caller: string }>;

    "LogMinimumDepositAmountVault(address,uint256,address)"(
      vault?: string | null,
      minimumDepositAmount?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { vault: string; minimumDepositAmount: BigNumber; caller: string }
    >;

    LogMinimumDepositAmountVault(
      vault?: string | null,
      minimumDepositAmount?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { vault: string; minimumDepositAmount: BigNumber; caller: string }
    >;

    "LogQueueCapVault(address,uint256,address)"(
      vault?: string | null,
      queueCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; queueCap: BigNumber; caller: string }>;

    LogQueueCapVault(
      vault?: string | null,
      queueCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; queueCap: BigNumber; caller: string }>;

    "LogRPPoolRatings(uint256,uint8,uint8,address)"(
      index?: BigNumberish | null,
      lowerLimit?: BigNumberish | null,
      upperLimit?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, number, number, string],
      {
        index: BigNumber;
        lowerLimit: number;
        upperLimit: number;
        caller: string;
      }
    >;

    LogRPPoolRatings(
      index?: BigNumberish | null,
      lowerLimit?: BigNumberish | null,
      upperLimit?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, number, number, string],
      {
        index: BigNumber;
        lowerLimit: number;
        upperLimit: number;
        caller: string;
      }
    >;

    "LogRateLiquidityPool(address,uint8,address)"(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    LogRateLiquidityPool(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    "LogRateSwapPool(address,uint8,address)"(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    LogRateSwapPool(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    "LogRiskProfile(uint256,bool,bool,address)"(
      index?: BigNumberish | null,
      exists?: boolean | null,
      canBorrow?: boolean | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, boolean, boolean, string],
      { index: BigNumber; exists: boolean; canBorrow: boolean; caller: string }
    >;

    LogRiskProfile(
      index?: BigNumberish | null,
      exists?: boolean | null,
      canBorrow?: boolean | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, boolean, boolean, string],
      { index: BigNumber; exists: boolean; canBorrow: boolean; caller: string }
    >;

    "LogSwapPool(address,bool,address)"(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    LogSwapPool(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    "LogToken(address,bool,address)"(
      token?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { token: string; enabled: boolean; caller: string }>;

    LogToken(
      token?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { token: string; enabled: boolean; caller: string }>;

    "LogTokensToTokensHash(bytes32,address)"(
      tokensHash?: BytesLike | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { tokensHash: string; caller: string }>;

    LogTokensToTokensHash(
      tokensHash?: BytesLike | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { tokensHash: string; caller: string }>;

    "LogUnpauseVault(address,bool,address)"(
      vault?: string | null,
      unpaused?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; unpaused: boolean; caller: string }>;

    LogUnpauseVault(
      vault?: string | null,
      unpaused?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; unpaused: boolean; caller: string }>;

    "LogUserDepositCapVault(address,uint256,address)"(
      vault?: string | null,
      userDepositCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; userDepositCap: BigNumber; caller: string }>;

    LogUserDepositCapVault(
      vault?: string | null,
      userDepositCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; userDepositCap: BigNumber; caller: string }>;

    "LogVaultTotalValueLockedLimitInUnderlying(address,uint256,address)"(
      vault?: string | null,
      totalValueLockedLimitInUnderlying?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        vault: string;
        totalValueLockedLimitInUnderlying: BigNumber;
        caller: string;
      }
    >;

    LogVaultTotalValueLockedLimitInUnderlying(
      vault?: string | null,
      totalValueLockedLimitInUnderlying?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        vault: string;
        totalValueLockedLimitInUnderlying: BigNumber;
        caller: string;
      }
    >;

    "TransferFinanceOperator(address,address)"(
      financeOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { financeOperator: string; caller: string }>;

    TransferFinanceOperator(
      financeOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { financeOperator: string; caller: string }>;

    "TransferOPTYDistributor(address,address)"(
      optyDistributor?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { optyDistributor: string; caller: string }>;

    TransferOPTYDistributor(
      optyDistributor?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { optyDistributor: string; caller: string }>;

    "TransferOperator(address,address)"(
      operator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { operator: string; caller: string }>;

    TransferOperator(
      operator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { operator: string; caller: string }>;

    "TransferRiskOperator(address,address)"(
      riskOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { riskOperator: string; caller: string }>;

    TransferRiskOperator(
      riskOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { riskOperator: string; caller: string }>;

    "TransferStrategyOperator(address,address)"(
      strategyOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { strategyOperator: string; caller: string }>;

    TransferStrategyOperator(
      strategyOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { strategyOperator: string; caller: string }>;

    "TransferTreasury(address,address)"(
      treasury?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { treasury: string; caller: string }>;

    TransferTreasury(
      treasury?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { treasury: string; caller: string }>;
  };

  estimateGas: {
    aprOracle(overrides?: CallOverrides): Promise<BigNumber>;

    financeOperator(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    opty(overrides?: CallOverrides): Promise<BigNumber>;

    optyDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    registryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<BigNumber>;

    riskOperator(overrides?: CallOverrides): Promise<BigNumber>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    strategyManager(overrides?: CallOverrides): Promise<BigNumber>;

    strategyOperator(overrides?: CallOverrides): Promise<BigNumber>;

    strategyProvider(overrides?: CallOverrides): Promise<BigNumber>;

    swapPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    vaultToVaultConfiguration(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFeeRange(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aprOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    financeOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPools(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optyDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registryImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapPools(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultToVaultConfiguration(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalFeeRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
