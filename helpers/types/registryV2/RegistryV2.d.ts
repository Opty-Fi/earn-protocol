/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RegistryV2Interface extends ethers.utils.Interface {
  functions: {
    "addRiskProfile(uint256,string,string,(uint8,uint8))": FunctionFragment;
    "approveLiquidityPool(address)": FunctionFragment;
    "approveLiquidityPoolAndMapToAdapter(tuple[])": FunctionFragment;
    "approveSwapPool(address)": FunctionFragment;
    "approveSwapPoolAndMapToAdapter(tuple[])": FunctionFragment;
    "approveToken(address)": FunctionFragment;
    "approveTokenAndMapToTokensHash(bytes32,address[])": FunctionFragment;
    "aprOracle()": FunctionFragment;
    "become(address)": FunctionFragment;
    "financeOperator()": FunctionFragment;
    "getFinanceOperator()": FunctionFragment;
    "getGovernance()": FunctionFragment;
    "getHarvestCodeProvider()": FunctionFragment;
    "getLiquidityPool(address)": FunctionFragment;
    "getLiquidityPoolToAdapter(address)": FunctionFragment;
    "getODEFIVaultBooster()": FunctionFragment;
    "getOPTYDistributor()": FunctionFragment;
    "getOperator()": FunctionFragment;
    "getRiskManager()": FunctionFragment;
    "getRiskOperator()": FunctionFragment;
    "getRiskProfile(uint256)": FunctionFragment;
    "getRiskProfileList()": FunctionFragment;
    "getStrategyOperator()": FunctionFragment;
    "getStrategyProvider()": FunctionFragment;
    "getSwapPool(address)": FunctionFragment;
    "getSwapPoolToAdapter(address)": FunctionFragment;
    "getTokenHashes()": FunctionFragment;
    "getTokensHashByIndex(uint256)": FunctionFragment;
    "getTokensHashIndexByHash(bytes32)": FunctionFragment;
    "getTokensHashToTokenList(bytes32)": FunctionFragment;
    "governance()": FunctionFragment;
    "harvestCodeProvider()": FunctionFragment;
    "investStrategyRegistry()": FunctionFragment;
    "isApprovedToken(address)": FunctionFragment;
    "liquidityPoolToAdapter(address)": FunctionFragment;
    "liquidityPools(address)": FunctionFragment;
    "odefiVaultBooster()": FunctionFragment;
    "operator()": FunctionFragment;
    "opty()": FunctionFragment;
    "optyDistributor()": FunctionFragment;
    "optyStakingRateBalancer()": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "pendingRegistryImplementation()": FunctionFragment;
    "rateLiquidityPool(tuple[])": FunctionFragment;
    "rateSwapPool(address,uint8)": FunctionFragment;
    "registryImplementation()": FunctionFragment;
    "removeRiskProfile(uint256)": FunctionFragment;
    "revokeLiquidityPool(address[])": FunctionFragment;
    "revokeSwapPool(address)": FunctionFragment;
    "revokeToken(address)": FunctionFragment;
    "riskManager()": FunctionFragment;
    "riskOperator()": FunctionFragment;
    "riskProfilesArray(uint256)": FunctionFragment;
    "setFinanceOperator(address)": FunctionFragment;
    "setHarvestCodeProvider(address)": FunctionFragment;
    "setLiquidityPoolToAdapter(address,address)": FunctionFragment;
    "setODEFIVaultBooster(address)": FunctionFragment;
    "setOPTY(address)": FunctionFragment;
    "setOPTYDistributor(address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setRiskManager(address)": FunctionFragment;
    "setRiskOperator(address)": FunctionFragment;
    "setStrategyOperator(address)": FunctionFragment;
    "setStrategyProvider(address)": FunctionFragment;
    "setSwapPoolToAdapter(address,address)": FunctionFragment;
    "setTokensHashToTokens(bytes32,address[])": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "strategyManager()": FunctionFragment;
    "strategyOperator()": FunctionFragment;
    "strategyProvider()": FunctionFragment;
    "swapPoolToAdapter(address)": FunctionFragment;
    "swapPools(address)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "tokensHashIndexes(uint256)": FunctionFragment;
    "tokensHashToTokens(bytes32)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateRPPoolRatings(uint256,(uint8,uint8))": FunctionFragment;
    "vaultToVaultConfiguration(address)": FunctionFragment;
    "whitelistedUsers(address,address)": FunctionFragment;
    "withdrawalFeeRange()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRiskProfile",
    values: [BigNumberish, string, string, { lowerLimit: BigNumberish; upperLimit: BigNumberish }],
  ): string;
  encodeFunctionData(functionFragment: "approveLiquidityPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveLiquidityPoolAndMapToAdapter",
    values: [{ pool: string; adapter: string }[]],
  ): string;
  encodeFunctionData(functionFragment: "approveSwapPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveSwapPoolAndMapToAdapter",
    values: [{ pool: string; adapter: string }[]],
  ): string;
  encodeFunctionData(functionFragment: "approveToken", values: [string]): string;
  encodeFunctionData(functionFragment: "approveTokenAndMapToTokensHash", values: [BytesLike, string[]]): string;
  encodeFunctionData(functionFragment: "aprOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "become", values: [string]): string;
  encodeFunctionData(functionFragment: "financeOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getFinanceOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getGovernance", values?: undefined): string;
  encodeFunctionData(functionFragment: "getHarvestCodeProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLiquidityPool", values: [string]): string;
  encodeFunctionData(functionFragment: "getLiquidityPoolToAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "getODEFIVaultBooster", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOPTYDistributor", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRiskProfile", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getRiskProfileList", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStrategyOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStrategyProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "getSwapPool", values: [string]): string;
  encodeFunctionData(functionFragment: "getSwapPoolToAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "getTokenHashes", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTokensHashByIndex", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getTokensHashIndexByHash", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getTokensHashToTokenList", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "governance", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvestCodeProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "investStrategyRegistry", values?: undefined): string;
  encodeFunctionData(functionFragment: "isApprovedToken", values: [string]): string;
  encodeFunctionData(functionFragment: "liquidityPoolToAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "liquidityPools", values: [string]): string;
  encodeFunctionData(functionFragment: "odefiVaultBooster", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "opty", values?: undefined): string;
  encodeFunctionData(functionFragment: "optyDistributor", values?: undefined): string;
  encodeFunctionData(functionFragment: "optyStakingRateBalancer", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingGovernance", values?: undefined): string;
  encodeFunctionData(functionFragment: "pendingRegistryImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "rateLiquidityPool", values: [{ pool: string; rate: BigNumberish }[]]): string;
  encodeFunctionData(functionFragment: "rateSwapPool", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "registryImplementation", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeRiskProfile", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "revokeLiquidityPool", values: [string[]]): string;
  encodeFunctionData(functionFragment: "revokeSwapPool", values: [string]): string;
  encodeFunctionData(functionFragment: "revokeToken", values: [string]): string;
  encodeFunctionData(functionFragment: "riskManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskProfilesArray", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setFinanceOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "setHarvestCodeProvider", values: [string]): string;
  encodeFunctionData(functionFragment: "setLiquidityPoolToAdapter", values: [string, string]): string;
  encodeFunctionData(functionFragment: "setODEFIVaultBooster", values: [string]): string;
  encodeFunctionData(functionFragment: "setOPTY", values: [string]): string;
  encodeFunctionData(functionFragment: "setOPTYDistributor", values: [string]): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "setRiskManager", values: [string]): string;
  encodeFunctionData(functionFragment: "setRiskOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "setStrategyOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "setStrategyProvider", values: [string]): string;
  encodeFunctionData(functionFragment: "setSwapPoolToAdapter", values: [string, string]): string;
  encodeFunctionData(functionFragment: "setTokensHashToTokens", values: [BytesLike, string[]]): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(functionFragment: "strategyManager", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategyOperator", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategyProvider", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapPoolToAdapter", values: [string]): string;
  encodeFunctionData(functionFragment: "swapPools", values: [string]): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(functionFragment: "tokensHashIndexes", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tokensHashToTokens", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRPPoolRatings",
    values: [BigNumberish, { lowerLimit: BigNumberish; upperLimit: BigNumberish }],
  ): string;
  encodeFunctionData(functionFragment: "vaultToVaultConfiguration", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelistedUsers", values: [string, string]): string;
  encodeFunctionData(functionFragment: "withdrawalFeeRange", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addRiskProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveLiquidityPoolAndMapToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveSwapPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveSwapPoolAndMapToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveTokenAndMapToTokensHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aprOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "become", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "financeOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFinanceOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGovernance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHarvestCodeProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLiquidityPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getODEFIVaultBooster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOPTYDistributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRiskProfileList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStrategyOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStrategyProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenHashes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensHashByIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensHashIndexByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensHashToTokenList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvestCodeProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investStrategyRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApprovedToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "odefiVaultBooster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "opty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optyDistributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optyStakingRateBalancer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGovernance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingRegistryImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateSwapPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registryImplementation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeRiskProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeLiquidityPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeSwapPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskProfilesArray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFinanceOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHarvestCodeProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLiquidityPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setODEFIVaultBooster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOPTY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOPTYDistributor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRiskManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRiskOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStrategyOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStrategyProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSwapPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTokensHashToTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategyProvider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapPoolToAdapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensHashIndexes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensHashToTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRPPoolRatings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultToVaultConfiguration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawalFeeRange", data: BytesLike): Result;

  events: {
    "LogAllowWhitelistedStateVault(address,bool,address)": EventFragment;
    "LogDiscontinueVault(address,bool,address)": EventFragment;
    "LogLimitStateVault(address,bool,address)": EventFragment;
    "LogLiquidityPool(address,bool,address)": EventFragment;
    "LogLiquidityPoolToAdapter(address,address,address)": EventFragment;
    "LogMinimumDepositAmountVault(address,uint256,address)": EventFragment;
    "LogQueueCapVault(address,uint256,address)": EventFragment;
    "LogRPPoolRatings(uint256,uint8,uint8,address)": EventFragment;
    "LogRateLiquidityPool(address,uint8,address)": EventFragment;
    "LogRateSwapPool(address,uint8,address)": EventFragment;
    "LogRiskProfile(uint256,bool,bool,address)": EventFragment;
    "LogSwapPool(address,bool,address)": EventFragment;
    "LogSwapPoolToAdapter(address,address,address)": EventFragment;
    "LogToken(address,bool,address)": EventFragment;
    "LogTokensToTokensHash(bytes32,address)": EventFragment;
    "LogUnpauseVault(address,bool,address)": EventFragment;
    "LogUserDepositCapVault(address,uint256,address)": EventFragment;
    "LogVaultTotalValueLockedLimitInUnderlying(address,uint256,address)": EventFragment;
    "TransferFinanceOperator(address,address)": EventFragment;
    "TransferOPTYDistributor(address,address)": EventFragment;
    "TransferOperator(address,address)": EventFragment;
    "TransferRiskOperator(address,address)": EventFragment;
    "TransferStrategyOperator(address,address)": EventFragment;
    "TransferTreasury(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAllowWhitelistedStateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDiscontinueVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLimitStateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidityPoolToAdapter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMinimumDepositAmountVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogQueueCapVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRPPoolRatings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRateLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRateSwapPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRiskProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSwapPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSwapPoolToAdapter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTokensToTokensHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnpauseVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUserDepositCapVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVaultTotalValueLockedLimitInUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFinanceOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOPTYDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferRiskOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferStrategyOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTreasury"): EventFragment;
}

export type LogAllowWhitelistedStateVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    allowWhitelistedState: boolean;
    caller: string;
  }
>;

export type LogDiscontinueVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    discontinued: boolean;
    caller: string;
  }
>;

export type LogLimitStateVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    isLimitedState: boolean;
    caller: string;
  }
>;

export type LogLiquidityPoolEvent = TypedEvent<
  [string, boolean, string] & { pool: string; enabled: boolean; caller: string }
>;

export type LogLiquidityPoolToAdapterEvent = TypedEvent<
  [string, string, string] & { pool: string; adapter: string; caller: string }
>;

export type LogMinimumDepositAmountVaultEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    minimumDepositAmount: BigNumber;
    caller: string;
  }
>;

export type LogQueueCapVaultEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    queueCap: BigNumber;
    caller: string;
  }
>;

export type LogRPPoolRatingsEvent = TypedEvent<
  [BigNumber, number, number, string] & {
    index: BigNumber;
    lowerLimit: number;
    upperLimit: number;
    caller: string;
  }
>;

export type LogRateLiquidityPoolEvent = TypedEvent<
  [string, number, string] & { pool: string; rate: number; caller: string }
>;

export type LogRateSwapPoolEvent = TypedEvent<
  [string, number, string] & { pool: string; rate: number; caller: string }
>;

export type LogRiskProfileEvent = TypedEvent<
  [BigNumber, boolean, boolean, string] & {
    index: BigNumber;
    exists: boolean;
    canBorrow: boolean;
    caller: string;
  }
>;

export type LogSwapPoolEvent = TypedEvent<
  [string, boolean, string] & { pool: string; enabled: boolean; caller: string }
>;

export type LogSwapPoolToAdapterEvent = TypedEvent<
  [string, string, string] & { pool: string; adapter: string; caller: string }
>;

export type LogTokenEvent = TypedEvent<
  [string, boolean, string] & {
    token: string;
    enabled: boolean;
    caller: string;
  }
>;

export type LogTokensToTokensHashEvent = TypedEvent<[string, string] & { tokensHash: string; caller: string }>;

export type LogUnpauseVaultEvent = TypedEvent<
  [string, boolean, string] & {
    vault: string;
    unpaused: boolean;
    caller: string;
  }
>;

export type LogUserDepositCapVaultEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    userDepositCap: BigNumber;
    caller: string;
  }
>;

export type LogVaultTotalValueLockedLimitInUnderlyingEvent = TypedEvent<
  [string, BigNumber, string] & {
    vault: string;
    totalValueLockedLimitInUnderlying: BigNumber;
    caller: string;
  }
>;

export type TransferFinanceOperatorEvent = TypedEvent<[string, string] & { financeOperator: string; caller: string }>;

export type TransferOPTYDistributorEvent = TypedEvent<[string, string] & { optyDistributor: string; caller: string }>;

export type TransferOperatorEvent = TypedEvent<[string, string] & { operator: string; caller: string }>;

export type TransferRiskOperatorEvent = TypedEvent<[string, string] & { riskOperator: string; caller: string }>;

export type TransferStrategyOperatorEvent = TypedEvent<[string, string] & { strategyOperator: string; caller: string }>;

export type TransferTreasuryEvent = TypedEvent<[string, string] & { treasury: string; caller: string }>;

export class RegistryV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryInterface;

  functions: {
    "addRiskProfile(uint256,string,string,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "addRiskProfile(uint256[],string[],string[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveSwapPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveSwapPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveSwapPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveSwapPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    aprOracle(overrides?: CallOverrides): Promise<[string]>;

    become(
      _registryProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    financeOperator(overrides?: CallOverrides): Promise<[string]>;

    getFinanceOperator(overrides?: CallOverrides): Promise<[string]>;

    getGovernance(overrides?: CallOverrides): Promise<[string]>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityPool(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[[number, boolean] & { rating: number; isLiquidityPool: boolean }]>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<[string]>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<[string]>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<[string]>;

    getOperator(overrides?: CallOverrides): Promise<[string]>;

    getRiskManager(overrides?: CallOverrides): Promise<[string]>;

    getRiskOperator(overrides?: CallOverrides): Promise<[string]>;

    getRiskProfile(
      _riskProfileCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, boolean, [number, number] & { lowerLimit: number; upperLimit: number }, boolean, string, string] & {
          index: BigNumber;
          var0: boolean;
          poolRatingsRange: [number, number] & {
            lowerLimit: number;
            upperLimit: number;
          };
          exists: boolean;
          name: string;
          symbol: string;
        },
      ]
    >;

    getRiskProfileList(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getStrategyOperator(overrides?: CallOverrides): Promise<[string]>;

    getStrategyProvider(overrides?: CallOverrides): Promise<[string]>;

    getSwapPool(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[[number, boolean] & { rating: number; isLiquidityPool: boolean }]>;

    getSwapPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<[string]>;

    getTokenHashes(overrides?: CallOverrides): Promise<[string[]]>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<[string]>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<[string]>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    liquidityPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    opty(overrides?: CallOverrides): Promise<[string]>;

    optyDistributor(overrides?: CallOverrides): Promise<[string]>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<[string]>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "rateLiquidityPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "rateSwapPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "rateSwapPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    registryImplementation(overrides?: CallOverrides): Promise<[string]>;

    removeRiskProfile(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeSwapPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeSwapPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "revokeToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    riskManager(overrides?: CallOverrides): Promise<[string]>;

    riskOperator(overrides?: CallOverrides): Promise<[string]>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    setFinanceOperator(
      _financeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHarvestCodeProvider(
      _harvestCodeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setODEFIVaultBooster(
      _odefiVaultBooster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setOPTYDistributor(
      _optyDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRiskManager(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRiskOperator(
      _riskOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategyOperator(
      _strategyOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategyProvider(
      _strategyProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setSwapPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setSwapPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<[string]>;

    strategyOperator(overrides?: CallOverrides): Promise<[string]>;

    strategyProvider(overrides?: CallOverrides): Promise<[string]>;

    swapPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    swapPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber] & { index: BigNumber }>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vaultToVaultConfiguration(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        discontinued: boolean;
        unpaused: boolean;
        isLimitedState: boolean;
        allowWhitelistedState: boolean;
        withdrawalFee: BigNumber;
        userDepositCap: BigNumber;
        minimumDepositAmount: BigNumber;
        totalValueLockedLimitInUnderlying: BigNumber;
        queueCap: BigNumber;
      }
    >;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawalFeeRange(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lowerLimit: BigNumber; upperLimit: BigNumber }>;
  };

  "addRiskProfile(uint256,string,string,(uint8,uint8))"(
    _riskProfileCode: BigNumberish,
    _name: string,
    _symbol: string,
    _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "addRiskProfile(uint256[],string[],string[],tuple[])"(
    _riskProfileCodes: BigNumberish[],
    _names: string[],
    _symbols: string[],
    _poolRatingRanges: { lowerLimit: BigNumberish; upperLimit: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPoolAndMapToAdapter(tuple[])"(
    _poolAdapters: { pool: string; adapter: string }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveLiquidityPoolAndMapToAdapter(address,address)"(
    _pool: string,
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveSwapPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveSwapPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveSwapPoolAndMapToAdapter(tuple[])"(
    _poolAdapters: { pool: string; adapter: string }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveSwapPoolAndMapToAdapter(address,address)"(
    _pool: string,
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveToken(address[])"(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveTokenAndMapToTokensHash(bytes32,address[])"(
    _tokensHash: BytesLike,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approveTokenAndMapToTokensHash(tuple[])"(
    _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  aprOracle(overrides?: CallOverrides): Promise<string>;

  become(
    _registryProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  financeOperator(overrides?: CallOverrides): Promise<string>;

  getFinanceOperator(overrides?: CallOverrides): Promise<string>;

  getGovernance(overrides?: CallOverrides): Promise<string>;

  getHarvestCodeProvider(overrides?: CallOverrides): Promise<string>;

  getLiquidityPool(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<string>;

  getODEFIVaultBooster(overrides?: CallOverrides): Promise<string>;

  getOPTYDistributor(overrides?: CallOverrides): Promise<string>;

  getOperator(overrides?: CallOverrides): Promise<string>;

  getRiskManager(overrides?: CallOverrides): Promise<string>;

  getRiskOperator(overrides?: CallOverrides): Promise<string>;

  getRiskProfile(
    _riskProfileCode: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, boolean, [number, number] & { lowerLimit: number; upperLimit: number }, boolean, string, string] & {
      index: BigNumber;
      var0: boolean;
      poolRatingsRange: [number, number] & {
        lowerLimit: number;
        upperLimit: number;
      };
      exists: boolean;
      name: string;
      symbol: string;
    }
  >;

  getRiskProfileList(overrides?: CallOverrides): Promise<BigNumber[]>;

  getStrategyOperator(overrides?: CallOverrides): Promise<string>;

  getStrategyProvider(overrides?: CallOverrides): Promise<string>;

  getSwapPool(
    _pool: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  getSwapPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<string>;

  getTokenHashes(overrides?: CallOverrides): Promise<string[]>;

  getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  harvestCodeProvider(overrides?: CallOverrides): Promise<string>;

  investStrategyRegistry(overrides?: CallOverrides): Promise<string>;

  isApprovedToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<string>;

  liquidityPools(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  odefiVaultBooster(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  opty(overrides?: CallOverrides): Promise<string>;

  optyDistributor(overrides?: CallOverrides): Promise<string>;

  optyStakingRateBalancer(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pendingRegistryImplementation(overrides?: CallOverrides): Promise<string>;

  "rateLiquidityPool(tuple[])"(
    _poolRates: { pool: string; rate: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "rateLiquidityPool(address,uint8)"(
    _pool: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "rateSwapPool(address,uint8)"(
    _pool: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "rateSwapPool(tuple[])"(
    _poolRates: { pool: string; rate: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  registryImplementation(overrides?: CallOverrides): Promise<string>;

  removeRiskProfile(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeLiquidityPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeLiquidityPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeSwapPool(address)"(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeSwapPool(address[])"(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeToken(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "revokeToken(address[])"(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  riskManager(overrides?: CallOverrides): Promise<string>;

  riskOperator(overrides?: CallOverrides): Promise<string>;

  riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setFinanceOperator(
    _financeOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHarvestCodeProvider(
    _harvestCodeProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setLiquidityPoolToAdapter(address,address)"(
    _pool: string,
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setLiquidityPoolToAdapter(tuple[])"(
    _poolAdapters: { pool: string; adapter: string }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setODEFIVaultBooster(
    _odefiVaultBooster: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setOPTYDistributor(
    _optyDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRiskManager(
    _riskManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRiskOperator(
    _riskOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategyOperator(
    _strategyOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategyProvider(
    _strategyProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setSwapPoolToAdapter(address,address)"(
    _pool: string,
    _adapter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setSwapPoolToAdapter(tuple[])"(
    _poolAdapters: { pool: string; adapter: string }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setTokensHashToTokens(bytes32,address[])"(
    _tokensHash: BytesLike,
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setTokensHashToTokens(tuple[])"(
    _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  strategyManager(overrides?: CallOverrides): Promise<string>;

  strategyOperator(overrides?: CallOverrides): Promise<string>;

  strategyProvider(overrides?: CallOverrides): Promise<string>;

  swapPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<string>;

  swapPools(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

  tokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateRPPoolRatings(
    _riskProfileCode: BigNumberish,
    _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vaultToVaultConfiguration(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      discontinued: boolean;
      unpaused: boolean;
      isLimitedState: boolean;
      allowWhitelistedState: boolean;
      withdrawalFee: BigNumber;
      userDepositCap: BigNumber;
      minimumDepositAmount: BigNumber;
      totalValueLockedLimitInUnderlying: BigNumber;
      queueCap: BigNumber;
    }
  >;

  whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  withdrawalFeeRange(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { lowerLimit: BigNumber; upperLimit: BigNumber }>;

  callStatic: {
    "addRiskProfile(uint256,string,string,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: CallOverrides,
    ): Promise<void>;

    "addRiskProfile(uint256[],string[],string[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveLiquidityPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "approveLiquidityPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveSwapPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "approveSwapPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "approveSwapPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveSwapPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveToken(address)"(_token: string, overrides?: CallOverrides): Promise<void>;

    "approveToken(address[])"(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    aprOracle(overrides?: CallOverrides): Promise<string>;

    become(_registryProxy: string, overrides?: CallOverrides): Promise<void>;

    financeOperator(overrides?: CallOverrides): Promise<string>;

    getFinanceOperator(overrides?: CallOverrides): Promise<string>;

    getGovernance(overrides?: CallOverrides): Promise<string>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<string>;

    getLiquidityPool(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<string>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<string>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<string>;

    getOperator(overrides?: CallOverrides): Promise<string>;

    getRiskManager(overrides?: CallOverrides): Promise<string>;

    getRiskOperator(overrides?: CallOverrides): Promise<string>;

    getRiskProfile(
      _riskProfileCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, boolean, [number, number] & { lowerLimit: number; upperLimit: number }, boolean, string, string] & {
        index: BigNumber;
        var0: boolean;
        poolRatingsRange: [number, number] & {
          lowerLimit: number;
          upperLimit: number;
        };
        exists: boolean;
        name: string;
        symbol: string;
      }
    >;

    getRiskProfileList(overrides?: CallOverrides): Promise<BigNumber[]>;

    getStrategyOperator(overrides?: CallOverrides): Promise<string>;

    getStrategyProvider(overrides?: CallOverrides): Promise<string>;

    getSwapPool(
      _pool: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    getSwapPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<string>;

    getTokenHashes(overrides?: CallOverrides): Promise<string[]>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<string>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<string>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<boolean>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<string>;

    liquidityPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    opty(overrides?: CallOverrides): Promise<string>;

    optyDistributor(overrides?: CallOverrides): Promise<string>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<string>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "rateLiquidityPool(address,uint8)"(_pool: string, _rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "rateSwapPool(address,uint8)"(_pool: string, _rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "rateSwapPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    registryImplementation(overrides?: CallOverrides): Promise<string>;

    removeRiskProfile(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "revokeLiquidityPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "revokeLiquidityPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "revokeSwapPool(address)"(_pool: string, overrides?: CallOverrides): Promise<void>;

    "revokeSwapPool(address[])"(_pools: string[], overrides?: CallOverrides): Promise<void>;

    "revokeToken(address)"(_token: string, overrides?: CallOverrides): Promise<void>;

    "revokeToken(address[])"(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    riskManager(overrides?: CallOverrides): Promise<string>;

    riskOperator(overrides?: CallOverrides): Promise<string>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFinanceOperator(_financeOperator: string, overrides?: CallOverrides): Promise<void>;

    setHarvestCodeProvider(_harvestCodeProvider: string, overrides?: CallOverrides): Promise<void>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setODEFIVaultBooster(_odefiVaultBooster: string, overrides?: CallOverrides): Promise<void>;

    setOPTY(_opty: string, overrides?: CallOverrides): Promise<void>;

    setOPTYDistributor(_optyDistributor: string, overrides?: CallOverrides): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setRiskManager(_riskManager: string, overrides?: CallOverrides): Promise<void>;

    setRiskOperator(_riskOperator: string, overrides?: CallOverrides): Promise<void>;

    setStrategyOperator(_strategyOperator: string, overrides?: CallOverrides): Promise<void>;

    setStrategyProvider(_strategyProvider: string, overrides?: CallOverrides): Promise<void>;

    "setSwapPoolToAdapter(address,address)"(_pool: string, _adapter: string, overrides?: CallOverrides): Promise<void>;

    "setSwapPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    strategyManager(overrides?: CallOverrides): Promise<string>;

    strategyOperator(overrides?: CallOverrides): Promise<string>;

    strategyProvider(overrides?: CallOverrides): Promise<string>;

    swapPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<string>;

    swapPools(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[number, boolean] & { rating: number; isLiquidityPool: boolean }>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: CallOverrides,
    ): Promise<void>;

    vaultToVaultConfiguration(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        discontinued: boolean;
        unpaused: boolean;
        isLimitedState: boolean;
        allowWhitelistedState: boolean;
        withdrawalFee: BigNumber;
        userDepositCap: BigNumber;
        minimumDepositAmount: BigNumber;
        totalValueLockedLimitInUnderlying: BigNumber;
        queueCap: BigNumber;
      }
    >;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

    withdrawalFeeRange(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lowerLimit: BigNumber; upperLimit: BigNumber }>;
  };

  filters: {
    "LogAllowWhitelistedStateVault(address,bool,address)"(
      vault?: string | null,
      allowWhitelistedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; allowWhitelistedState: boolean; caller: string }>;

    LogAllowWhitelistedStateVault(
      vault?: string | null,
      allowWhitelistedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; allowWhitelistedState: boolean; caller: string }>;

    "LogDiscontinueVault(address,bool,address)"(
      vault?: string | null,
      discontinued?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; discontinued: boolean; caller: string }>;

    LogDiscontinueVault(
      vault?: string | null,
      discontinued?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; discontinued: boolean; caller: string }>;

    "LogLimitStateVault(address,bool,address)"(
      vault?: string | null,
      isLimitedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; isLimitedState: boolean; caller: string }>;

    LogLimitStateVault(
      vault?: string | null,
      isLimitedState?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; isLimitedState: boolean; caller: string }>;

    "LogLiquidityPool(address,bool,address)"(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    LogLiquidityPool(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    "LogLiquidityPoolToAdapter(address,address,address)"(
      pool?: string | null,
      adapter?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string, string], { pool: string; adapter: string; caller: string }>;

    LogLiquidityPoolToAdapter(
      pool?: string | null,
      adapter?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string, string], { pool: string; adapter: string; caller: string }>;

    "LogMinimumDepositAmountVault(address,uint256,address)"(
      vault?: string | null,
      minimumDepositAmount?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { vault: string; minimumDepositAmount: BigNumber; caller: string }
    >;

    LogMinimumDepositAmountVault(
      vault?: string | null,
      minimumDepositAmount?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      { vault: string; minimumDepositAmount: BigNumber; caller: string }
    >;

    "LogQueueCapVault(address,uint256,address)"(
      vault?: string | null,
      queueCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; queueCap: BigNumber; caller: string }>;

    LogQueueCapVault(
      vault?: string | null,
      queueCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; queueCap: BigNumber; caller: string }>;

    "LogRPPoolRatings(uint256,uint8,uint8,address)"(
      index?: BigNumberish | null,
      lowerLimit?: BigNumberish | null,
      upperLimit?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, number, number, string],
      {
        index: BigNumber;
        lowerLimit: number;
        upperLimit: number;
        caller: string;
      }
    >;

    LogRPPoolRatings(
      index?: BigNumberish | null,
      lowerLimit?: BigNumberish | null,
      upperLimit?: BigNumberish | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, number, number, string],
      {
        index: BigNumber;
        lowerLimit: number;
        upperLimit: number;
        caller: string;
      }
    >;

    "LogRateLiquidityPool(address,uint8,address)"(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    LogRateLiquidityPool(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    "LogRateSwapPool(address,uint8,address)"(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    LogRateSwapPool(
      pool?: string | null,
      rate?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, number, string], { pool: string; rate: number; caller: string }>;

    "LogRiskProfile(uint256,bool,bool,address)"(
      index?: BigNumberish | null,
      exists?: boolean | null,
      canBorrow?: boolean | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, boolean, boolean, string],
      { index: BigNumber; exists: boolean; canBorrow: boolean; caller: string }
    >;

    LogRiskProfile(
      index?: BigNumberish | null,
      exists?: boolean | null,
      canBorrow?: boolean | null,
      caller?: null,
    ): TypedEventFilter<
      [BigNumber, boolean, boolean, string],
      { index: BigNumber; exists: boolean; canBorrow: boolean; caller: string }
    >;

    "LogSwapPool(address,bool,address)"(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    LogSwapPool(
      pool?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { pool: string; enabled: boolean; caller: string }>;

    "LogSwapPoolToAdapter(address,address,address)"(
      pool?: string | null,
      adapter?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string, string], { pool: string; adapter: string; caller: string }>;

    LogSwapPoolToAdapter(
      pool?: string | null,
      adapter?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string, string], { pool: string; adapter: string; caller: string }>;

    "LogToken(address,bool,address)"(
      token?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { token: string; enabled: boolean; caller: string }>;

    LogToken(
      token?: string | null,
      enabled?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { token: string; enabled: boolean; caller: string }>;

    "LogTokensToTokensHash(bytes32,address)"(
      tokensHash?: BytesLike | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { tokensHash: string; caller: string }>;

    LogTokensToTokensHash(
      tokensHash?: BytesLike | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { tokensHash: string; caller: string }>;

    "LogUnpauseVault(address,bool,address)"(
      vault?: string | null,
      unpaused?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; unpaused: boolean; caller: string }>;

    LogUnpauseVault(
      vault?: string | null,
      unpaused?: boolean | null,
      caller?: string | null,
    ): TypedEventFilter<[string, boolean, string], { vault: string; unpaused: boolean; caller: string }>;

    "LogUserDepositCapVault(address,uint256,address)"(
      vault?: string | null,
      userDepositCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; userDepositCap: BigNumber; caller: string }>;

    LogUserDepositCapVault(
      vault?: string | null,
      userDepositCap?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<[string, BigNumber, string], { vault: string; userDepositCap: BigNumber; caller: string }>;

    "LogVaultTotalValueLockedLimitInUnderlying(address,uint256,address)"(
      vault?: string | null,
      totalValueLockedLimitInUnderlying?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        vault: string;
        totalValueLockedLimitInUnderlying: BigNumber;
        caller: string;
      }
    >;

    LogVaultTotalValueLockedLimitInUnderlying(
      vault?: string | null,
      totalValueLockedLimitInUnderlying?: BigNumberish | null,
      caller?: string | null,
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        vault: string;
        totalValueLockedLimitInUnderlying: BigNumber;
        caller: string;
      }
    >;

    "TransferFinanceOperator(address,address)"(
      financeOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { financeOperator: string; caller: string }>;

    TransferFinanceOperator(
      financeOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { financeOperator: string; caller: string }>;

    "TransferOPTYDistributor(address,address)"(
      optyDistributor?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { optyDistributor: string; caller: string }>;

    TransferOPTYDistributor(
      optyDistributor?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { optyDistributor: string; caller: string }>;

    "TransferOperator(address,address)"(
      operator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { operator: string; caller: string }>;

    TransferOperator(
      operator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { operator: string; caller: string }>;

    "TransferRiskOperator(address,address)"(
      riskOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { riskOperator: string; caller: string }>;

    TransferRiskOperator(
      riskOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { riskOperator: string; caller: string }>;

    "TransferStrategyOperator(address,address)"(
      strategyOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { strategyOperator: string; caller: string }>;

    TransferStrategyOperator(
      strategyOperator?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { strategyOperator: string; caller: string }>;

    "TransferTreasury(address,address)"(
      treasury?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { treasury: string; caller: string }>;

    TransferTreasury(
      treasury?: string | null,
      caller?: string | null,
    ): TypedEventFilter<[string, string], { treasury: string; caller: string }>;
  };

  estimateGas: {
    "addRiskProfile(uint256,string,string,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "addRiskProfile(uint256[],string[],string[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveSwapPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveSwapPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveSwapPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveSwapPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    aprOracle(overrides?: CallOverrides): Promise<BigNumber>;

    become(_registryProxy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    financeOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getFinanceOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPool(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<BigNumber>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    getOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskManager(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskProfile(_riskProfileCode: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRiskProfileList(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyOperator(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapPool(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSwapPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenHashes(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    opty(overrides?: CallOverrides): Promise<BigNumber>;

    optyDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "rateLiquidityPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "rateSwapPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "rateSwapPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    registryImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    removeRiskProfile(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeSwapPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeSwapPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "revokeToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<BigNumber>;

    riskOperator(overrides?: CallOverrides): Promise<BigNumber>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFinanceOperator(
      _financeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHarvestCodeProvider(
      _harvestCodeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setODEFIVaultBooster(
      _odefiVaultBooster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setOPTYDistributor(
      _optyDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOperator(_operator: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRiskManager(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRiskOperator(
      _riskOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategyOperator(
      _strategyOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategyProvider(
      _strategyProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setSwapPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setSwapPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    strategyManager(overrides?: CallOverrides): Promise<BigNumber>;

    strategyOperator(overrides?: CallOverrides): Promise<BigNumber>;

    strategyProvider(overrides?: CallOverrides): Promise<BigNumber>;

    swapPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapPools(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vaultToVaultConfiguration(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFeeRange(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    "addRiskProfile(uint256,string,string,(uint8,uint8))"(
      _riskProfileCode: BigNumberish,
      _name: string,
      _symbol: string,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "addRiskProfile(uint256[],string[],string[],tuple[])"(
      _riskProfileCodes: BigNumberish[],
      _names: string[],
      _symbols: string[],
      _poolRatingRanges: {
        lowerLimit: BigNumberish;
        upperLimit: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveLiquidityPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveSwapPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveSwapPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveSwapPoolAndMapToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveSwapPoolAndMapToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveTokenAndMapToTokensHash(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approveTokenAndMapToTokensHash(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    aprOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    become(
      _registryProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    financeOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFinanceOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHarvestCodeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityPool(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getODEFIVaultBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOPTYDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskProfile(_riskProfileCode: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskProfileList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapPool(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapPoolToAdapter(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensHashByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensHashIndexByHash(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensHashToTokenList(_tokensHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestCodeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    investStrategyRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedToken(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPools(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    odefiVaultBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optyDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optyStakingRateBalancer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRegistryImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rateLiquidityPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "rateLiquidityPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "rateSwapPool(address,uint8)"(
      _pool: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "rateSwapPool(tuple[])"(
      _poolRates: { pool: string; rate: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    registryImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRiskProfile(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeLiquidityPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeLiquidityPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeSwapPool(address)"(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeSwapPool(address[])"(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeToken(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "revokeToken(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    riskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskProfilesArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFinanceOperator(
      _financeOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHarvestCodeProvider(
      _harvestCodeProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setODEFIVaultBooster(
      _odefiVaultBooster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOPTY(_opty: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setOPTYDistributor(
      _optyDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRiskManager(
      _riskManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRiskOperator(
      _riskOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategyOperator(
      _strategyOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategyProvider(
      _strategyProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setSwapPoolToAdapter(address,address)"(
      _pool: string,
      _adapter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setSwapPoolToAdapter(tuple[])"(
      _poolAdapters: { pool: string; adapter: string }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setTokensHashToTokens(bytes32,address[])"(
      _tokensHash: BytesLike,
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setTokensHashToTokens(tuple[])"(
      _tokensHashesDetails: { tokensHash: BytesLike; tokens: string[] }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    strategyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapPoolToAdapter(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapPools(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensHashIndexes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensHashToTokens(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRPPoolRatings(
      _riskProfileCode: BigNumberish,
      _poolRatingRange: { lowerLimit: BigNumberish; upperLimit: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vaultToVaultConfiguration(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedUsers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalFeeRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
