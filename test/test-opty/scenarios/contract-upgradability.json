{
  "title": "Contract Upgradability",
  "description": "Test cases for Contract Upgradability",
  "stories": [
    {
      "description": "Should be able to use contract functions from proxy address",
      "actions": [
        {
          "contract": "",
          "action": "deployContract",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "proxy",
          "action": "setPendingImplementation(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "main",
          "action": "become(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "mainProxy",
          "action": "initMainContractData",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "mainProxy",
          "action": "checkMainContractFunction",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-operator shouldn't be able to set new contract in the proxy contract",
      "actions": [
        {
          "contract": "",
          "action": "deployContract",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "proxy",
          "action": "setPendingImplementation(address)",
          "args": {},
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ]
    },
    {
      "description": "Non-operator shouldn't be able to execute become() in the contract",
      "actions": [
        {
          "contract": "",
          "action": "deployContract",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "proxy",
          "action": "setPendingImplementation(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "main",
          "action": "become(address)",
          "args": {},
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ]
    },
    {
      "description": "Should be able to use new contract functions from proxy address and maintain storage value",
      "actions": [
        {
          "contract": "",
          "action": "deployContract",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "proxy",
          "action": "setPendingImplementation(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "main",
          "action": "become(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "mainProxy",
          "action": "checkMainContractFunction",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "deployNewContract",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "proxy",
          "action": "setPendingImplementation(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "main",
          "action": "become(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "mainProxy",
          "action": "checkTestingContractFunction",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "mainProxy",
          "action": "verifyOldValue",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    }
  ]
}
