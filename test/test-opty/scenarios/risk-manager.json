{
  "title": "RiskManager",
  "description": "Test cases for RiskManager contract",
  "stories": [
    {
      "description": "GetBestStrategy should return empty in StrategyProvider if strategy is not qualified, defaultStrategy is not set and defaultStrategyState is Zero ",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 0
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vaultStepInvestStrategyDefinitionRegistry",
          "action": "setStrategy(bytes32,(address,address,bool)[])",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(string,address[])",
          "args": {},
          "expectedValue": "0x0000000000000000000000000000000000000000000000000000000000000000"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "GetBestStrategy should return the best strategy in StrategyProvider if strategy is qualified",
      "setActions": [
        {
          "contract": "registry",
          "action": "updateRPPoolRatings(string,(uint8,uint8))",
          "args": {
            "poolRatingRange": [0, 10]
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address[])",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": { "score": [2, 2, 2] },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vaultStepInvestStrategyDefinitionRegistry",
          "action": "setStrategy(bytes32,(address,address,bool)[])",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(string,address[])",
          "args": {},
          "expectedValue": ""
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])"
        }
      ]
    },
    {
      "description": "GetBestStrategy should return the default strategy in StrategyProvider if strategy is not qualified (liquidityPool is not approved)",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(string,bytes32,bytes32)",
          "args": { "score": [2, 2, 2] },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(string,address[])",
          "args": {},
          "expectedValue": ""
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])"
        }
      ]
    },
    {
      "description": "GetBestStrategy should return the default strategy in StrategyProvider if strategy is not qualified (rate is not in expected range)",
      "setActions": [
        {
          "contract": "registry",
          "action": "updateRPPoolRatings(string,(uint8,uint8))",
          "args": {
            "poolRatingRange": [3, 10]
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address[])",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": { "score": [1, 1, 1] },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vaultStepInvestStrategyDefinitionRegistry",
          "action": "setStrategy(bytes32,(address,address,bool)[])",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(string,bytes32,bytes32)",
          "args": { "score": [5, 5, 5] },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "riskManager",
          "action": "getBestStrategy(string,address[])",
          "args": {},
          "expectedValue": ""
        }
      ],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "revokeLiquidityPool(address[])"
        }
      ]
    }
  ]
}
