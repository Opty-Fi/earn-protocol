{
  "title": "StrategyProvider",
  "description": "Test cases for checking Functions' Visibility of StrategyProvider contract",
  "stories": [
    {
      "description": "[SetBestStrategy] - StrategyOperator should be able to set best strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "outputToken": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "isBorrow": false
              }
            ],
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "riskProfile": "RP1"
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "rpToTokenToBestStrategy(string,bytes32)",
          "args": {
            "riskProfile": "RP1",
            "tokenHash": "0x50440c05332207ba7b1bb0dcaf90d1864e3aa44dd98a51f88d0796a7623f0c80"
          },
          "expectedValue": "0xf14294bb238069facb3da995a8d6e805967558c99956a61ce7aa8b53954db845"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Non-StrategyOperator shouldn't be able to set best strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "outputToken": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "isBorrow": false
              }
            ],
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "riskProfile": "RP1"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Old StrategyOperator shouldn't be able to set best strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "outputToken": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "isBorrow": false
              }
            ],
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "riskProfile": "RP1"
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[setBestDefaultStrategy] - StrategyOperator should be able to set best default strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "outputToken": "0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d",
                "isBorrow": false
              }
            ],
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "riskProfile": "RP1"
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "rpToTokenToDefaultStrategy(string,bytes32)",
          "args": {
            "riskProfile": "RP1",
            "tokenHash": "0x50440c05332207ba7b1bb0dcaf90d1864e3aa44dd98a51f88d0796a7623f0c80"
          },
          "expectedValue": "0x96c4bb18025d9dc8a66aee1e9c88d3a896852ff155498bd92a62815c26aad9e6"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setBestDefaultStrategy] - Non-StrategyOperator shouldn't be able to set best default strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "outputToken": "0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d",
                "isBorrow": false
              }
            ],
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "riskProfile": "RP1"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Old StrategyOperator shouldn't be able to set best default strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestDefaultStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "outputToken": "0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d",
                "isBorrow": false
              }
            ],
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f",
            "riskProfile": "RP1"
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[setVaultRewardStrategy] - StrategyOperator should be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000]
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "vaultRewardTokenHashToVaultRewardTokenStrategy(bytes32)",
          "args": {},
          "expectedValue": [5000, 5000]
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setVaultRewardStrategy] - Non-StrategyOperator shouldn't be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Old StrategyOperator shouldn't be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
          "args": {
            "vaultRewardStrategy": [5000, 5000]
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[setDefaultStrategyState] StrategyOperator should be able to set Default Strategy state",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "strategyOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "strategyProvider",
          "action": "defaultStrategyState()",
          "args": {},
          "expectedValue": 1
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[setDefaultStrategyState] Non-StrategyOperator shouldn't be able to set Default Strategy state",
      "setActions": [
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetBestStrategy] - Old StrategyOperator shouldn't be able to set best Vault Reward strategy",
      "setActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setDefaultStrategyState(uint8)",
          "args": {
            "defaultStrategyState": 1
          },
          "executor": "strategyOperator",
          "expect": "fail",
          "message": "caller is not the strategyOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    }
  ]
}
