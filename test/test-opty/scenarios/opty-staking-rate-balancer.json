{
  "title": "OptyStakingRateBalancer",
  "description": "Test cases for checking Functions of OptyStakingRateBalancer contract",
  "stories": [
    {
      "description": "[SetStakingVaultMultipliers] - FinanceOperator should be able to set staking vault multipliers",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultMultipliers(address,uint256)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract",
            "multiplier": 10000
          },
          "executor": "financeOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "stakingVaultMultipliers(address)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract"
          },
          "expectedValue": 10000
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultMultipliers(address,uint256)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract",
            "multiplier": 0
          },
          "executor": "financeOperator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[SetStakingVaultMultipliers] - Non-FinanceOperator shouldn't be able to set staking vault multipliers",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultMultipliers(address,uint256)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract",
            "multiplier": 10000
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the financeOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetStakingVaultMultipliers] - Old FinanceOperator shouldn't be able to set staking vault multipliers",
      "setActions": [
        {
          "contract": "registry",
          "action": "setFinanceOperator(address)",
          "args": {
            "addressName": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultMultipliers(address,uint256)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract",
            "multiplier": 10000
          },
          "executor": "financeOperator",
          "expect": "fail",
          "message": "caller is not the financeOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setFinanceOperator(address)",
          "args": {
            "addressName": "financeOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[SetStakingVaultOPTYAllocation] - FinanceOperator should be able to set staking vault OPTY allocation",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultOPTYAllocation(uint256)",
          "args": {
            "stakingVaultOPTYAllocation": 10000000000
          },
          "executor": "financeOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "stakingVaultOPTYAllocation()",
          "args": {},
          "expectedValue": 10000000000
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultOPTYAllocation(uint256)",
          "args": {
            "stakingVaultOPTYAllocation": 0
          },
          "executor": "financeOperator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[SetStakingVaultOPTYAllocation] - Non-FinanceOperator shouldn't be able to set staking vault OPTY allocation",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultOPTYAllocation(uint256)",
          "args": {
            "stakingVaultOPTYAllocation": 10000000000
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the financeOperator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[SetStakingVaultOPTYAllocation] - Old FinanceOperator shouldn't be able to set staking vault OPTY allocation",
      "setActions": [
        {
          "contract": "registry",
          "action": "setFinanceOperator(address)",
          "args": {
            "addressName": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultOPTYAllocation(uint256)",
          "args": {
            "stakingVaultOPTYAllocation": 10000000000
          },
          "executor": "financeOperator",
          "expect": "fail",
          "message": "caller is not the financeOperator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "contract": "registry",
          "action": "setFinanceOperator(address)",
          "args": {
            "addressName": "financeOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "[Initialize] - Only Governance can execute initialize function",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "initialize(address,address,address,address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "checkInitialize",
          "args": {},
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[Initialize] - Non-Governance can't execute initialize function",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "initialize(address,address,address,address)",
          "args": {},
          "executor": "financeOperator",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[UpdateOptyRates] - Only staking vault can execute function",
      "setActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "initialize(address,address,address,address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultMultipliers(address,uint256)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract",
            "multiplier": 10000
          },
          "executor": "financeOperator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyStakingRateBalancer",
          "action": "setStakingVaultOPTYAllocation(uint256)",
          "args": {
            "stakingVaultOPTYAllocation": 10000000000
          },
          "executor": "financeOperator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "dummyOptyStakingVaultEmptyContract",
          "action": "updateStakedOPTY(address,uint256)",
          "args": {
            "amount": 30000000
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "dummyOptyStakingVaultEmptyContract",
          "action": "updateOptyRates(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[UpdateOptyRates] - Non staking vault can't execute function",
      "setActions": [
        {
          "contract": "dummyContract",
          "action": "updateOptyRates(address)",
          "args": {},
          "executor": "owner",
          "expect": "fail",
          "message": "!stakingVaults"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[UpdateStakedOPTY] - Only staking vault can execute function",
      "setActions": [
        {
          "contract": "dummyOptyStakingVaultEmptyContract",
          "action": "updateStakedOPTY(address,uint256)",
          "args": {
            "amount": 30000000
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "stakingVaultToStakedOPTY(address)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract"
          },
          "expectedValue": ">"
        },
        {
          "contract": "optyStakingRateBalancer",
          "action": "stakingVaultToUserStakedOPTY(address,address)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract"
          },
          "expectedValue": ">"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[UpdateStakedOPTY] - Non staking vault can't execute function",
      "setActions": [
        {
          "contract": "dummyContract",
          "action": "updateStakedOPTY(address,uint256)",
          "args": {
            "amount": 30000000
          },
          "executor": "owner",
          "expect": "fail",
          "message": "!stakingVaults"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[UpdateUnstakedOPTY] - Only staking vault can execute function",
      "setActions": [
        {
          "contract": "dummyOptyStakingVaultEmptyContract",
          "action": "updateUnstakedOPTY(address,uint256)",
          "args": {
            "amount": 30000000
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingRateBalancer",
          "action": "stakingVaultToStakedOPTY(address)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract"
          },
          "expectedValue": "<"
        },
        {
          "contract": "optyStakingRateBalancer",
          "action": "stakingVaultToUserStakedOPTY(address,address)",
          "args": {
            "addressName": "dummyOptyStakingVaultEmptyContract"
          },
          "expectedValue": "<"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "[UpdateUnstakedOPTY] - Non staking vault can't execute function",
      "setActions": [
        {
          "contract": "dummyContract",
          "action": "updateUnstakedOPTY(address,uint256)",
          "args": {
            "amount": 30000000
          },
          "executor": "owner",
          "expect": "fail",
          "message": "!stakingVaults"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "[Upgradability] Should be able to use functions and variables in new contracts and maintains old variable states",
      "setActions": [
        {
          "contract": "",
          "action": "initData()",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "become(address)",
          "args": {},
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "",
          "action": "isNewContract()",
          "args": {},
          "expectedValue": true
        },
        {
          "contract": "",
          "action": "verifyOldValue()",
          "args": {},
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    }
  ]
}
