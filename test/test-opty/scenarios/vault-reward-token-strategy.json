{
  "title": "Vault Reward Token Strategy",
  "description": "Test cases for the VaultRewardTokenStrategy (if set or not set)",
  "vaults": [
    {
      "name": "Vault",
      "profile": "RP1",
      "stories": [
        {
          "description": "Vault shouldn't hold any RewardTokens if no VaultRewardTokenStrategy is set",
          "setActions": [
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": "0"
            }
          ]
        },
        {
          "description": "Vault should hold RewardTokens if VaultRewardTokenStrategy is set",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": ">0"
            }
          ]
        },

        {
          "description": "Governance should be able to set withdrawal fee ",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "60"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "withdrawalFee()",
              "args": {},
              "expectedValue": "60"
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set withdrawal fee ",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "60"
              },
              "executer": "user1",
              "expect": "fail",
              "message": "caller is not having governance"
            }
          ],
          "getActions": []
        },

        {
          "description": "Governance should be able to set treasury",
          "setActions": [
            {
              "contract": "registry",
              "action": "setTreasury(address)",
              "args": {
                "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "registry",
              "action": "treasury()",
              "args": {},
              "expectedValue": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set treasury",
          "setActions": [
            {
              "contract": "registry",
              "action": "setTreasury(address)",
              "args": {
                "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
              },
              "executer": "user1",
              "expect": "fail",
              "message": "caller is not the operator"
            }
          ],
          "getActions": []
        },
        {
          "description": "Governance shouldn't be able to set treasury with address(0)",
          "setActions": [
            {
              "contract": "registry",
              "action": "setTreasury(address)",
              "args": {
                "address": "0x0000000000000000000000000000000000000000"
              },
              "executer": "owner",
              "expect": "fail",
              "message": "!address(0)"
            }
          ],
          "getActions": []
        }
      ]
    }
  ]
}
