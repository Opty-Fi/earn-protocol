{
  "title": "Vault Reward Token Strategy",
  "description": "Test cases for the VaultRewardTokenStrategy (if set or not set)",
  "vaults": [
    {
      "name": "Vault",
      "riskProfileCode": 1,
      "stories": [
        {
          "description": "Vault shouldn't hold any RewardTokens if no VaultRewardTokenStrategy is set",
          "setActions": [
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "tokenErc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": "0"
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "StrategyOperator should be able to set VaultRewardTokenStrategy with Hold and Convert 5000 (50%)",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "strategyProvider",
              "action": "vaultRewardTokenHashToVaultRewardTokenStrategy(bytes32)",
              "args": {},
              "expectedValue": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "StrategyOperator should be able to Re-set VaultRewardTokenStrategy with Hold and Convert 0%",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [0, 0]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "strategyProvider",
              "action": "vaultRewardTokenHashToVaultRewardTokenStrategy(bytes32)",
              "args": {},
              "expectedValue": {
                "vaultRewardStrategy": [0, 0]
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "VaultRewardTokenStrategy's Hold and Convert values should be sum of 10000 (max basis value) (100%)",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [3000, 7000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "strategyProvider",
              "action": "vaultRewardTokenHashToVaultRewardTokenStrategy(bytes32)",
              "args": {},
              "expectedValue": {
                "vaultRewardStrategy": [3000, 7000]
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "VaultRewardTokenStrategy should NOT set if Hold and Convert values sum != 10000 (100%)",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [3000, 7500]
              },
              "executer": "owner",
              "expect": "fail",
              "message": "!HoldConvertBasisRange"
            }
          ],
          "getActions": []
        },
        {
          "description": "Non-StrategyOperator shouldn't be able to set Vault Reward Token Strategy",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "user1",
              "expect": "fail",
              "message": "caller is not the strategyOperator"
            }
          ],
          "getActions": []
        },
        {
          "description": "Vault should hold RewardTokens if VaultRewardTokenStrategy is set to 50%",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "tokenErc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": ">0"
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "Operator of the Vault should be able harvest RewardTokens (if any) using harvest() function",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "harvest(bytes32)",
              "args": {},
              "executer": "operator",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": ">0"
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "Non-operator of the Vault should be UNABLE to harvest RewardTokens (if any) using harvest() function",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "harvest(bytes32)",
              "args": {},
              "executer": "nonOperator",
              "expect": "fail",
              "message": "caller is not the operator"
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": "="
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "Vault shouldn't hold RewardTokens if VaultRewardTokenStrategy's Hold and Convert is RE-SET to 0%",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "tokenErc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [0, 0]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "tokenErc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": "0"
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "Vault should hold RewardTokens if VaultRewardTokenStrategy's Hold is set to 10000 (100%)",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [10000, 0]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "tokenErc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": ">0"
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "Vault shouldn't hold RewardTokens if VaultRewardTokenStrategy's Convert is set to 10000 (100%)",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [0, 10000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "tokenErc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": {
                  "DAI": "15000000000000000000",
                  "USDC": "15000000",
                  "USDT": "15000000",
                  "SLP_WETH_USDC": "15000000000000"
                }
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "rewardTokenErc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "vault"
              },
              "expectedValue": {
                "balance": "0"
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "StrategyOperator shouldn't be able to set strategy for 0x0..0 VaultRewardToken hash",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardTokenInvalidHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "fail",
              "message": "!bytes32(0)"
            }
          ],
          "getActions": []
        },
        {
          "description": "StrategyOperator shouldn't be able to set strategy for Non-existing VaultRewardToken hash",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardTokenInvalidHash": "0xf14294bb238069facb3da995a8d6e805967558c99956a61ce7aa8b53954db845",
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "fail",
              "message": "!VaultRewardTokenHashExists"
            }
          ],
          "getActions": []
        },
        {
          "description": "Risk Manager should get the VaultRewardTokenStrategy set by Operator in Strategy Provider",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "riskManager",
              "action": "getVaultRewardTokenStrategy(address[])",
              "args": {},
              "expectedValue": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "expect": "success",
              "message": ""
            }
          ]
        },
        {
          "description": "Risk Manager shouldn't get the VaultRewardTokenStrategy for empty VaultRewardToken",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "riskManager",
              "action": "getVaultRewardTokenStrategy(address[])",
              "args": {
                "underlyingTokens": []
              },
              "expectedValue": {},
              "expect": "fail",
              "message": "Tokens_Empty!"
            }
          ]
        },
        {
          "description": "Risk Manager shouldn't get the VaultRewardTokenStrategy for zero-address reward token",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "riskManager",
              "action": "getVaultRewardTokenStrategy(address[])",
              "args": {
                "underlyingTokens": ["0x0000000000000000000000000000000000000000"]
              },
              "expectedValue": {},
              "expect": "fail",
              "message": "uT=address(0)"
            }
          ]
        },
        {
          "description": "Risk Manager shouldn't get the VaultRewardTokenStrategy for EOA reward token",
          "setActions": [
            {
              "contract": "strategyProvider",
              "action": "setVaultRewardStrategy(bytes32,(uint256,uint256))",
              "args": {
                "vaultRewardStrategy": [5000, 5000]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "riskManager",
              "action": "getVaultRewardTokenStrategy(address[])",
              "args": {
                "underlyingTokens": ["0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"]
              },
              "expectedValue": {},
              "expect": "fail",
              "message": "uT!=isContract()"
            }
          ]
        }
      ]
    }
  ]
}
