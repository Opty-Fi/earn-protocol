{
  "title": "Claim OPTY Timestamp Limitation",
  "description": "Test cases for Claim OPTY timestamp limitation in Opty Minter contract",
  "stories": [
    {
      "description": "Non-Operator can't set operatorUnlockClaimOPTYTimestamp",
      "setActions": [
        {
          "contract": "optyMinter",
          "action": "setOperatorUnlockClaimOPTYTimestamp(uint256)",
          "args": {
            "operatorUnlockClaimOPTYTimestamp": 1631863987
          },
          "executer": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can't set operatorUnlockClaimOPTYTimestamp to a value greater than maxUnlockClaimOPTYTimestamp",
      "setActions": [
        {
          "contract": "optyMinter",
          "action": "setOperatorUnlockClaimOPTYTimestamp(uint256)",
          "args": {
            "operatorUnlockClaimOPTYTimestamp": 1700000001
          },
          "executer": "owner",
          "expect": "fail",
          "message": "operatorUnlockClaimOPTYTimestamp > maxUnlockClaimOPTYTimestamp"
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can set operatorUnlockClaimOPTYTimestamp",
      "setActions": [
        {
          "contract": "optyMinter",
          "action": "setOperatorUnlockClaimOPTYTimestamp(uint256)",
          "args": {
            "operatorUnlockClaimOPTYTimestamp": 1631863987
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyMinter",
          "action": "operatorUnlockClaimOPTYTimestamp()",
          "args": {},
          "expectedValue": 1631863987
        }
      ]
    },
    {
      "description": "User shouldn't be able to claim OPTY before operatorUnlockClaimOPTYTimestamp",
      "setActions": [
        {
          "contract": "optyMinter",
          "action": "setOperatorUnlockClaimOPTYTimestamp(uint256)",
          "args": {
            "operatorUnlockClaimOPTYTimestamp": 1631863987
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyMinter",
          "action": "claimOpty(address)",
          "args": {
            "holder": "owner"
          },
          "executer": "owner",
          "expect": "fail",
          "message": "you should wait until operatorUnlockClaimOPTYTimestamp"
        }
      ],
      "getActions": []
    },
    {
      "description": "User should be able to claim OPTY after operatorUnlockClaimOPTYTimestamp",
      "setActions": [
        {
          "contract": "optyMinter",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyMinter",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyMinter",
          "action": "setOperatorUnlockClaimOPTYTimestamp(uint256)",
          "args": {
            "operatorUnlockClaimOPTYTimestamp": 1621863987
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyMinter",
          "action": "claimOpty(address)",
          "args": {
            "holder": "owner"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can set opty vault rate",
      "setActions": [
        {
          "contract": "optyMinter",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyMinter",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyMinter",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyMinter",
          "action": "optyVaultRatePerSecond(address)",
          "args": {
            "contractName": "vault"
          },
          "expectedValue": "100"
        }
      ]
    }
  ]
}
