{
  "title": "Gas fees owed to operator",
  "description": "Test cases for gas fees owed to operator in Vault contracts",
  "stories": [
    {
      "description": "Gas owed to operator should be reset to zero when the operator rebalances again",
      "setActions": [
        {
          "contract": "",
          "action": "fundWallet",
          "args": {
            "amount": "1500000000000000000000"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "contractName": "vault",
            "amount": "1500000000000000000000"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "token": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "liquidityPool": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C",
            "adapterName": "HarvestAdapter"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "token": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C",
            "score": 1
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vaultStepInvestStrategyDefinitionRegistry",
          "action": "setStrategy(bytes32,(address,address,bool)[])",
          "args": {
            "strategy": [
              {
                "contract": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C",
                "outputToken": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C",
                "isBorrow": false
              }
            ],
            "token": "0x6B175474E89094C44Da98b954EedeAC495271d0F"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C",
                "outputToken": "0xab7FA2B2985BCcfC13c6D86b1D5A17486ab1e04C",
                "isBorrow": false
              }
            ],
            "token": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
            "riskProfile": "RP1"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDeposit(uint256)",
          "args": {
            "amount": "1500000000000000000000"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "rebalance()",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "approveLiquidityPool(address)",
          "args": {
            "token": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
            "adapterName": "CompoundAdapter"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "registry",
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "token": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
            "score": 2
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vaultStepInvestStrategyDefinitionRegistry",
          "action": "setStrategy(bytes32,(address,address,bool)[])",
          "args": {
            "strategy": [
              {
                "contract": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "outputToken": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "isBorrow": false
              }
            ],
            "token": "0x6B175474E89094C44Da98b954EedeAC495271d0F"
          },
          "executor": "",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "strategyProvider",
          "action": "setBestStrategy(string,bytes32,bytes32)",
          "args": {
            "strategy": [
              {
                "contract": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "outputToken": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "isBorrow": false
              }
            ],
            "token": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
            "riskProfile": "RP1"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "rebalance()",
          "args": {},
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "vault",
          "action": "gasOwedToOperator()",
          "args": {},
          "expectedValue": ""
        }
      ]
    }
  ]
}
