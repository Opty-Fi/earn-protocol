{
  "title": "Registry",
  "description": "Test cases for Registry contract",
  "stories": [
    {
      "description": "Governance should be able to set OPTYDistributor's address",
      "setActions": [
        {
          "action": "setOPTYDistributor(address)",
          "args": {
            "newOptyDistributor": "optyDistributor"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getOPTYDistributor()",
          "args": {},
          "expectedValue": {
            "addressName": "optyDistributor"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set OPTYDistributor's address",
      "setActions": [
        {
          "action": "setOPTYDistributor(address)",
          "args": {
            "newOptyDistributor": "optyDistributor"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set FinanceOperator's address",
      "setActions": [
        {
          "action": "setFinanceOperator(address)",
          "args": {
            "newFinanceOperator": "financeOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "financeOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "financeOperator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set FinanceOperator's address",
      "setActions": [
        {
          "action": "setFinanceOperator(address)",
          "args": {
            "newFinanceOperator": "financeOperator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set StrategyOperator's address",
      "setActions": [
        {
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "strategyOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "strategyOperator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set StrategyOperator's address",
      "setActions": [
        {
          "action": "setStrategyOperator(address)",
          "args": {
            "newStrategyOperator": "strategyOperator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set RiskOperator's address",
      "setActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "riskOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "riskOperator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set RiskOperator's address",
      "setActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "riskOperator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set Operator's address",
      "setActions": [
        {
          "action": "setOperator(address)",
          "args": {
            "newOperator": "operator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getOperator()",
          "args": {},
          "expectedValue": {
            "addressName": "operator"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set Operator's address",
      "setActions": [
        {
          "action": "setOperator(address)",
          "args": {
            "newOperator": "operator"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Governance should be able to set Treasury's address",
      "setActions": [
        {
          "action": "setTreasury(address)",
          "args": {
            "contractName": "treasury"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "treasury()",
          "args": {},
          "expectedValue": {
            "contractName": "treasury"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Governance shouldn't be able to set Treasury's address",
      "setActions": [
        {
          "action": "setTreasury(address)",
          "args": {
            "contractName": "treasury"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not having governance"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set vaultStepInvestStrategyDefinitionRegistry Contract address",
      "setActions": [
        {
          "action": "setVaultStepInvestStrategyDefinitionRegistry(address)",
          "args": {
            "contractName": "vaultStepInvestStrategyDefinitionRegistry"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getVaultStepInvestStrategyDefinitionRegistry()",
          "args": {},
          "expectedValue": {
            "contractName": "vaultStepInvestStrategyDefinitionRegistry"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set vaultStepInvestStrategyDefinitionRegistry Contract address",
      "setActions": [
        {
          "action": "setVaultStepInvestStrategyDefinitionRegistry(address)",
          "args": {
            "contractName": "vaultStepInvestStrategyDefinitionRegistry"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set APROracle Contract address",
      "setActions": [
        {
          "action": "setAPROracle(address)",
          "args": {
            "contractName": "aprOracle"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getAprOracle()",
          "args": {},
          "expectedValue": {
            "contractName": "aprOracle"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set APROracle Contract address",
      "setActions": [
        {
          "action": "setAPROracle(address)",
          "args": {
            "contractName": "aprOracle"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set StrategyProvider Contract address",
      "setActions": [
        {
          "action": "setStrategyProvider(address)",
          "args": {
            "contractName": "strategyProvider"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getStrategyProvider()",
          "args": {},
          "expectedValue": {
            "contractName": "strategyProvider"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set StrategyProvider Contract address",
      "setActions": [
        {
          "action": "setStrategyProvider(address)",
          "args": {
            "contractName": "strategyProvider"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set RiskManager Contract address",
      "setActions": [
        {
          "action": "setRiskManager(address)",
          "args": {
            "contractName": "riskManager"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getRiskManager()",
          "args": {},
          "expectedValue": {
            "contractName": "riskManager"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set RiskManager Contract address",
      "setActions": [
        {
          "action": "setRiskManager(address)",
          "args": {
            "contractName": "riskManager"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set HarvestCodeProvider Contract address",
      "setActions": [
        {
          "action": "setHarvestCodeProvider(address)",
          "args": {
            "contractName": "harvestCodeProvider"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getHarvestCodeProvider()",
          "args": {},
          "expectedValue": {
            "contractName": "harvestCodeProvider"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set HarvestCodeProvider Contract address",
      "setActions": [
        {
          "action": "setHarvestCodeProvider(address)",
          "args": {
            "contractName": "harvestCodeProvider"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set StrategyManager Contract address",
      "setActions": [
        {
          "action": "setStrategyManager(address)",
          "args": {
            "contractName": "strategyManager"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getStrategyManager()",
          "args": {},
          "expectedValue": {
            "contractName": "strategyManager"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set StrategyManager Contract address",
      "setActions": [
        {
          "action": "setStrategyManager(address)",
          "args": {
            "contractName": "strategyManager"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set OPTY Contract address",
      "setActions": [
        {
          "action": "setOPTY(address)",
          "args": {
            "contractName": "opty"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "opty()",
          "args": {},
          "expectedValue": {
            "contractName": "opty"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set OPTY Contract address",
      "setActions": [
        {
          "action": "setOPTY(address)",
          "args": {
            "contractName": "opty"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set PriceOracle Contract address",
      "setActions": [
        {
          "action": "setPriceOracle(address)",
          "args": {
            "contractName": "priceOracle"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "priceOracle()",
          "args": {},
          "expectedValue": {
            "contractName": "priceOracle"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set PriceOracle Contract address",
      "setActions": [
        {
          "action": "setPriceOracle(address)",
          "args": {
            "contractName": "priceOracle"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set OPTYStakingRateBalancer Contract address",
      "setActions": [
        {
          "action": "setOPTYStakingRateBalancer(address)",
          "args": {
            "contractName": "optyStakingRateBalancer"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getOPTYStakingRateBalancer()",
          "args": {},
          "expectedValue": {
            "contractName": "optyStakingRateBalancer"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set OPTYStakingRateBalancer Contract address",
      "setActions": [
        {
          "action": "setOPTYStakingRateBalancer(address)",
          "args": {
            "contractName": "optyStakingRateBalancer"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set ODEFIVaultBooster Contract address",
      "setActions": [
        {
          "action": "setODEFIVaultBooster(address)",
          "args": {
            "contractName": "odefiVaultBooster"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "getODEFIVaultBooster()",
          "args": {},
          "expectedValue": {
            "contractName": "odefiVaultBooster"
          },
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set ODEFIVaultBooster Contract address",
      "setActions": [
        {
          "action": "setODEFIVaultBooster(address)",
          "args": {
            "contractName": "odefiVaultBooster"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a token",
      "setActions": [
        {
          "action": "approveToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokens(address)",
          "args": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to approve a list of tokens",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokens(address)",
          "args": {
            "address": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        },
        {
          "action": "tokens(address)",
          "args": {
            "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        },
        {
          "action": "tokens(address)",
          "args": {
            "address": "0xdac17f958d2ee523a2206206994597c13d831ec7"
          },
          "expectedValue": true,
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to approve a token multiple times",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!tokens"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": [
              "0x6b175474e89094c44da98b954eedeac495271d0f",
              "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "0xdac17f958d2ee523a2206206994597c13d831ec7"
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to approve non-contract address",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": ["0x70eA4eCd78aBe80e6879c345aeD4838AB79a9c17"]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!isContract"
        },
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x70eA4eCd78aBe80e6879c345aeD4838AB79a9c17"]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!isContract"
        },
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x70eA4eCd78aBe80e6879c345aeD4838AB79a9c17"]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!isContract"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a list of liquidity pools",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        },
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to approve a liquidity pool multiple times",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!liquidityPools"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "RiskOperator should be able to rate a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-RiskOperator should be able to rate a liquidity pool",
      "setActions": [
        {
          "action": "rateLiquidityPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Risk Operator should be able to rate a list of liquidity pools",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        },
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [3, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 0]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a list of liquidity pools",
      "setActions": [
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Risk Operator shouldn't be able to rate non-approved liquidity pools",
      "setActions": [
        {
          "action": "rateLiquidityPool((address,uint8)[])",
          "args": {
            "lqRate": [["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!liquidityPools"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a liquidity pool",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a list of liquidity pools",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        },
        {
          "action": "liquidityPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to revoke a liquidity pool",
      "setActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to revoke a list of liquidity pools",
      "setActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to approve a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to approve a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        },
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to approve a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to approve a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator shouldn't be able to approve a credit pool multiple times",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!creditPools"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "RiskOperator should be able to rate a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateCreditPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateCreditPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "RiskOperator should be able to rate a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [2, true],
          "expectedMultiValues": {}
        },
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [3, true],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 0],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 0]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a credit pool",
      "setActions": [
        {
          "action": "rateCreditPool(address,uint8)",
          "args": {
            "lqRate": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to rate a list of credit pools",
      "setActions": [
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [
              ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2],
              ["0x24a42fD28C976A61Df5D00D0599C34c4f90748c8", 3]
            ]
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to rate non-approved liquidity pools",
      "setActions": [
        {
          "action": "rateCreditPool((address,uint8)[])",
          "args": {
            "lqRate": [["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", 2]]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!liquidityPools"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a credit pool",
      "setActions": [
        {
          "action": "approveCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to revoke a list of credit pools",
      "setActions": [
        {
          "action": "approveCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "revokeCreditPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        },
        {
          "action": "creditPools(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedValue": [0, false],
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set liquidity pool to adapter",
      "setActions": [
        {
          "action": "approveLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "CompoundAdapter"
            }
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedMultiValues": {},
          "expectedValue": "CompoundAdapter"
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address)",
          "args": {
            "lqs": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Non-Operator shouldn't be able to set liquidity pool to adapter",
      "setActions": [
        {
          "action": "setLiquidityPoolToAdapter(address,address)",
          "args": {
            "lqs": {
              "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
              "adapterName": "CompoundAdapter"
            }
          },
          "executor": "user0",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set multiple liquidity pools to adapters",
      "setActions": [
        {
          "action": "approveLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setLiquidityPoolToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "expectedMultiValues": {},
          "expectedValue": "CompoundAdapter"
        },
        {
          "action": "liquidityPoolToAdapter(address)",
          "args": {
            "address": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"
          },
          "expectedMultiValues": {},
          "expectedValue": "AaveV1Adapter"
        }
      ],
      "cleanActions": [
        {
          "action": "revokeLiquidityPool(address[])",
          "args": {
            "lqs": ["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set mutiple non-approved liquidity pools to adapters",
      "setActions": [
        {
          "action": "setLiquidityPoolToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!liquidityPools"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-Operator shouldn't be able to set multiple liquidity pools to adapters",
      "setActions": [
        {
          "action": "setLiquidityPoolToAdapter((address,address)[])",
          "args": {
            "lqs": [
              {
                "liquidityPool": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
                "adapterName": "CompoundAdapter"
              },
              {
                "liquidityPool": "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8",
                "adapterName": "AaveV1Adapter"
              }
            ]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to set token hash to token",
      "setActions": [
        {
          "action": "approveToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens(address[])",
          "args": {
            "tokensHash": ["0x6b175474e89094c44da98b954eedeac495271d0f"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "0"
          },
          "expectedValue": "0x50440c05332207ba7b1bb0dcaf90d1864e3aa44dd98a51f88d0796a7623f0c80",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address)",
          "args": {
            "tokens": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to set token hash to multiple tokens",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens(address[][])",
          "args": {
            "tokensHash": [
              ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"],
              ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "0x6b175474e89094c44da98b954eedeac495271d0f"]
            ]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "1"
          },
          "expectedValue": "0x8bb515c59c8ed89250b9316105ba225d5aebd720e87e69f2ba78fad8fab9ea7d",
          "expectedMultiValues": {}
        },
        {
          "action": "tokensHashIndexes(uint256)",
          "args": {
            "index": "2"
          },
          "expectedValue": "0x358484c2a974d5a47260a9016e4e8bb7e9d5f88f41b8fdc74351bba825e62b4c",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set token hash to multiple tokens (including non-approve token)",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens(address[][])",
          "args": {
            "tokensHash": [
              [
                "0x6b175474e89094c44da98b954eedeac495271d0f",
                "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                "0xdac17f958d2ee523a2206206994597c13d831ec7"
              ],
              ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "0x6b175474e89094c44da98b954eedeac495271d0f"]
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!tokens"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set existing token hash to tokens",
      "setActions": [
        {
          "action": "approveToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setTokensHashToTokens(address[][])",
          "args": {
            "tokensHash": [
              ["0x6b175474e89094c44da98b954eedeac495271d0f"],
              ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!_isNewTokensHash"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "revokeToken(address[])",
          "args": {
            "tokens": ["0x6b175474e89094c44da98b954eedeac495271d0f", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator shouldn't be able to set token hash to non-approved tokens",
      "setActions": [
        {
          "action": "setTokensHashToTokens(address[][])",
          "args": {
            "tokensHash": [
              ["0x6b175474e89094c44da98b954eedeac495271d0f"],
              ["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"]
            ]
          },
          "executor": "operator",
          "expect": "fail",
          "message": "!tokens"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to add a Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP1",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskProfiles(string)",

          "args": {
            "riskProfile": "RP1"
          },
          "expectedMultiValues": {
            "noOfSteps": 1,
            "lowerLimit": 0,
            "upperLimit": 10,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to add the existing Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP2",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP2",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "RP_already_exists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to add the empty Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "RP_Empty!"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to add a Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP1",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to update no. of steps for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP3",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRiskProfileSteps(string,uint8)",
          "args": {
            "riskProfile": "RP3",
            "noOfSteps": 2
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskProfiles(string)",

          "args": {
            "riskProfile": "RP3"
          },
          "expectedMultiValues": {
            "noOfSteps": 2,
            "lowerLimit": 0,
            "upperLimit": 10,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to update no. of steps for non-existing Risk Profile",
      "setActions": [
        {
          "action": "updateRiskProfileSteps(string,uint8)",
          "args": {
            "riskProfile": "Non-Existing-RP",
            "noOfSteps": 2
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!Rp_Exists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator should be able to update no. of steps for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP4",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRiskProfileSteps(string,uint8)",
          "args": {
            "riskProfile": "RP4",
            "noOfSteps": 2
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to update pool ratings for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP5",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRPPoolRatings(string,(uint8,uint8))",
          "args": {
            "riskProfile": "RP5",
            "poolRatingRange": [0, 20]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskProfiles(string)",
          "args": {
            "riskProfile": "RP5"
          },
          "expectedMultiValues": {
            "noOfSteps": 1,
            "lowerLimit": 0,
            "upperLimit": 20,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to update pool ratings for non-existing Risk Profile",
      "setActions": [
        {
          "action": "updateRPPoolRatings(string,(uint8,uint8))",
          "args": {
            "riskProfile": "Non-Existing-RP",
            "poolRatingRange": [0, 20]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "!Rp_Exists"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to update pool ratings for Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP6",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "updateRPPoolRatings(string,(uint8,uint8))",
          "args": {
            "riskProfile": "RP6",
            "poolRatingRange": [0, 20]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to remove the Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP7",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "removeRiskProfile(uint256)",
          "args": {
            "riskProfile": "RP7"
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskProfiles(string)",

          "args": {
            "riskProfile": "RP7"
          },
          "expectedMultiValues": {
            "noOfSteps": 0,
            "lowerLimit": null,
            "upperLimit": null,
            "exists": false
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "RiskOperator shouldn't be able to remove the Risk Profile from invalid index",
      "setActions": [
        {
          "action": "removeRiskProfile(uint256)",
          "args": {
            "index": 100
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "Invalid_Rp_index"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator should be able to remove the Risk Profile",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP8",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "removeRiskProfile(uint256)",
          "args": {
            "riskProfile": "RP8"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "RiskOperator should be able to set a multiple Risk Profiles",
      "setActions": [
        {
          "action": "addRiskProfile(string[],uint8[],(uint8,uint8)[])",
          "args": {
            "riskProfile": ["RP9", "RP10", "RP11"],
            "noOfSteps": [1, 2, 3],
            "poolRatingsRange": [
              [0, 20],
              [0, 40],
              [0, 60]
            ]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "riskProfiles(string)",
          "args": {
            "riskProfile": "RP9"
          },
          "expectedMultiValues": {
            "noOfSteps": 1,
            "lowerLimit": 0,
            "upperLimit": 20,
            "exists": true
          },
          "expectedValue": ""
        },
        {
          "action": "riskProfiles(string)",
          "args": {
            "riskProfile": "RP10"
          },
          "expectedMultiValues": {
            "noOfSteps": 2,
            "lowerLimit": 0,
            "upperLimit": 40,
            "exists": true
          },
          "expectedValue": ""
        },
        {
          "action": "riskProfiles(string)",
          "args": {
            "riskProfile": "RP11"
          },
          "expectedMultiValues": {
            "noOfSteps": 3,
            "lowerLimit": 0,
            "upperLimit": 60,
            "exists": true
          },
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Non-RiskOperator shouldn't be able to set a multiple Risk Profiles",
      "setActions": [
        {
          "action": "addRiskProfile(string[],uint8[],(uint8,uint8)[])",
          "args": {
            "riskProfile": ["RP1", "RP2", "RP3"],
            "noOfSteps": [1, 2, 3],
            "poolRatingsRange": [
              [0, 20],
              [0, 40],
              [0, 60]
            ]
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "Old-Operator shouldn't be able to execute function allowing only operator",
      "setActions": [
        {
          "action": "setOperator(address)",
          "args": {
            "newOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setVaultStepInvestStrategyDefinitionRegistry(address)",
          "args": {
            "contractName": "vaultStepInvestStrategyDefinitionRegistry"
          },
          "executor": "operator",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "setOperator(address)",
          "args": {
            "newOperator": "operator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Old-RiskOperator shouldn't be able to execute function allowing only riskOperator",
      "setActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "user1"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "action": "addRiskProfile(string[],uint8[],(uint8,uint8)[])",
          "args": {
            "riskProfile": ["RP1", "RP2", "RP3"],
            "noOfSteps": [1, 2, 3],
            "poolRatingsRange": [
              [0, 20],
              [0, 40],
              [0, 60]
            ]
          },
          "executor": "riskOperator",
          "expect": "fail",
          "message": "caller is not the risk operator"
        }
      ],
      "getActions": [],
      "cleanActions": [
        {
          "action": "setRiskOperator(address)",
          "args": {
            "newRiskOperator": "riskOperator"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "Operator should be able to map token and riskProfile to Vault address",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP12",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setUnderlyingAssetHashToRPToVaults(address[],string,address)",
          "args": {
            "tokens": ["0x6B175474E89094C44Da98b954EedeAC495271d0F"],
            "riskProfile": "RP12",
            "vault": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643"
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "underlyingAssetHashToRPToVaults(bytes32,string)",
          "args": {
            "tokens": ["0x6B175474E89094C44Da98b954EedeAC495271d0F"],
            "riskProfile": "RP12"
          },
          "expectedValue": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    },
    {
      "description": "Operator should be able to map mulitple tokens and riskProfile to Vault addresses",
      "setActions": [
        {
          "action": "addRiskProfile(string,uint8,(uint8,uint8))",
          "args": {
            "riskProfile": "RP13",
            "noOfSteps": 1,
            "poolRatingRange": [0, 10]
          },
          "executor": "riskOperator",
          "expect": "success",
          "message": ""
        },
        {
          "action": "setUnderlyingAssetHashToRPToVaults(address[][],string[],address[][])",
          "args": {
            "multiTokens": [
              ["0x6B175474E89094C44Da98b954EedeAC495271d0F"],
              ["0xdac17f958d2ee523a2206206994597c13d831ec7"]
            ],
            "riskProfiles": ["RP13"],
            "vaults": [["0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643", "0x797AAB1ce7c01eB727ab980762bA88e7133d2157"]]
          },
          "executor": "operator",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "action": "underlyingAssetHashToRPToVaults(bytes32,string)",
          "args": {
            "tokens": ["0x6B175474E89094C44Da98b954EedeAC495271d0F"],
            "riskProfile": "RP13"
          },
          "expectedValue": "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
          "expectedMultiValues": {}
        },
        {
          "action": "underlyingAssetHashToRPToVaults(bytes32,string)",
          "args": {
            "tokens": ["0xdac17f958d2ee523a2206206994597c13d831ec7"],
            "riskProfile": "RP13"
          },
          "expectedValue": "0x797AAB1ce7c01eB727ab980762bA88e7133d2157",
          "expectedMultiValues": {}
        }
      ],
      "cleanActions": []
    }
  ]
}
