{
  "title": "Charge Withdrawal Fee",
  "description": "Test cases for _chargeWithdrawlFee",
  "vaults": [
    {
      "name": "Vault",
      "profile": "RP1",
      "stories": [
        {
          "description": "User have to pay withdrawal fee and it will be given to 1 treasury account when they do userWithdrawRebalance",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user2",
                "amount": "1000000000000000000"
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "user2"
              },
              "expectedValue": "950000000000000000"
            },
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
              },
              "expectedValue": "50000000000000000"
            }
          ]
        },

        {
          "description": "User have to pay the latest withdrawal fee set post deletion of the existing of the withdrawal fee and it will be transferred to 1 treasury account when they do userWithdrawRebalance",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "300"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300]]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user2",
                "amount": "1000000000000000000"
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "user2"
              },
              "expectedValue": "950000000000000000"
            },
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
              },
              "expectedValue": "50000000000000000"
            }
          ]
        },

        {
          "description": "User have to pay withdrawal fee and it will be splitted among 2 treasury accounts when they do userWithdrawRebalance",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                  ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                ]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user2",
                "amount": "1000000000000000000"
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "user2"
              },
              "expectedValue": "950000000000000000"
            },
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
              },
              "expectedValue": "30000000000000000"
            },
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "address": "0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B"
              },
              "expectedValue": "20000000000000000"
            }
          ]
        },

        {
          "description": "User have to pay the latest withdrawal fee set post deletion of the existing withdrawal fee when they do userWithdrawRebalance",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "800"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500],
                  ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 300]
                ]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                  ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                ]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user2",
                "amount": "1000000000000000000"
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user2",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "user2"
              },
              "expectedValue": "950000000000000000"
            },
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
              },
              "expectedValue": "30000000000000000"
            },
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "address": "0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B"
              },
              "expectedValue": "20000000000000000"
            }
          ]
        },

        {
          "description": "Governance should be able to set withdrawal fee ",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "60"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "withdrawalFee()",
              "args": {},
              "expectedValue": "60"
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set withdrawal fee ",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "60"
              },
              "executer": "user1",
              "expect": "fail",
              "message": "caller is not having governance"
            }
          ],
          "getActions": []
        },
        {
          "description": "User don't have to pay withdrawal fee when no treasury address is set",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "",
              "action": "fundWallet",
              "args": {
                "addressName": "user1",
                "amount": "1000000000000000000"
              },
              "executer": "",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "addressName": "vault",
                "amount": "1000000000000000000"
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": "1000000000000000000"
              },
              "executer": "user1",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "erc20",
              "action": "balanceOf(address)",
              "args": {
                "addressName": "user1"
              },
              "expectedValue": "1000000000000000000"
            }
          ]
        },

        {
          "description": "Governance should be able to set 1 treasury account",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "getTreasuryAccounts()",
              "args": {},
              "expectedValue": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set 1 treasury",
          "setActions": [
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
              },
              "executer": "user1",
              "expect": "fail",
              "message": "caller is not having governance"
            }
          ],
          "getActions": []
        },

        {
          "description": "Governance should be able to set 2 treasury accounts",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "500"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                  ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                ]
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "getTreasuryAccounts()",
              "args": {},
              "expectedValue": [
                ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
              ]
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set 2 treasury accounts",
          "setActions": [
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                  ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                ]
              },
              "executer": "user1",
              "expect": "fail",
              "message": "caller is not having governance"
            }
          ],
          "getActions": []
        },

        {
          "description": "Governance shouldn't be able to set treasury with address(0)",
          "setActions": [
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [["0x0000000000000000000000000000000000000000", 500]]
              },
              "executer": "owner",
              "expect": "fail",
              "message": "!address(0)"
            }
          ],
          "getActions": []
        },
        {
          "description": "Governance shouldn't be able to set any 1 treasury address with address(0)",
          "setActions": [
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                  ["0x0000000000000000000000000000000000000000", 200]
                ]
              },
              "executer": "owner",
              "expect": "fail",
              "message": "!address(0)"
            }
          ],
          "getActions": []
        },
        {
          "description": "Governance shouldn't be able to set treasury account fee shares not equal to withdrawal fee share",
          "setActions": [
            {
              "contract": "vault",
              "action": "setWithdrawalFee(uint256)",
              "args": {
                "fee": "800"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "setTreasuryAccountsShare((address,uint256)[])",
              "args": {
                "treasuryAccountsWithShares": [
                  ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500],
                  ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 500]
                ]
              },
              "executer": "owner",
              "expect": "fail",
              "message": "FeeShares!=WithdrawalFee"
            }
          ],
          "getActions": []
        }
      ]
    }
  ]
}
