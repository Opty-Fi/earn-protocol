{
  "title": "Charge Withdrawal Fee",
  "description": "Test cases for _chargeWithdrawlFee",
  "vaults": [
    {
      "name": "Vault",
      "profile": "RP1",
      "stories": [
        {
          "description": "User have to pay withdrawal fee and it will be given to 1 treasury account when they do userWithdrawRebalance",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "950000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "50000000000000000"
                }
              ]
            }
          ]
        },

        {
          "description": "User have to pay the latest withdrawal fee set post deletion of the existing of the withdrawal fee and it will be transferred to 1 treasury account when they do userWithdrawRebalance",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "300"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300]]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "950000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "50000000000000000"
                }
              ]
            }
          ]
        },

        {
          "description": "1st set withdrawal fee and Users pay it, 2nd reset the withdrawal fee to 0 and User should not pay the withdrawal fee",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "950000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "50000000000000000"
                }
              ]
            },
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "0"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 0]]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "1000000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "0"
                }
              ]
            }
          ]
        },

        {
          "description": "User have to pay withdrawal fee and it will be splitted among 2 treasury accounts when they do userWithdrawRebalance",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                    ]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "950000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "30000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B"
                  },
                  "expectedValue": "20000000000000000"
                }
              ]
            }
          ]
        },

        {
          "description": "User have to pay the latest withdrawal fee set post deletion of the existing withdrawal fee when they do userWithdrawRebalance",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "800"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 300]
                    ]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "registry",
                  "action": "getTreasuryShares(address)",
                  "args": {
                    "addressName": "vault"
                  },
                  "expectedValue": [
                    ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500],
                    ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 300]
                  ]
                }
              ]
            },
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                    ]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "registry",
                  "action": "getTreasuryShares(address)",
                  "args": {
                    "addressName": "vault"
                  },
                  "expectedValue": [
                    ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                    ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                  ]
                }
              ]
            },
            {
              "setActions": [
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "950000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "30000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B"
                  },
                  "expectedValue": "20000000000000000"
                }
              ]
            }
          ]
        },

        {
          "description": "User have to pay the old withdrawal fee if treasury fee is also set and then later governance trying to set wrong treasury fee share when user do userWithdrawRebalance",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                    ]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "registry",
                  "action": "getTreasuryShares(address)",
                  "args": {
                    "addressName": "vault"
                  },
                  "expectedValue": [
                    ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                    ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                  ]
                }
              ]
            },
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                    ]
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "FeeShares!=WithdrawalFee"
                }
              ],
              "getActions": []
            },
            {
              "setActions": [
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user2",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user2",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user2"
                  },
                  "expectedValue": "950000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b"
                  },
                  "expectedValue": "30000000000000000"
                },
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "address": "0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B"
                  },
                  "expectedValue": "20000000000000000"
                }
              ]
            }
          ]
        },

        {
          "description": "Governance should be able to set withdrawal fee ",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "60"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "registry",
                  "action": "vaultToVaultConfiguration(address)",
                  "args": {
                    "addressName": "vault"
                  },
                  "expectedValue": "60"
                }
              ]
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set withdrawal fee out of basis range (0-10000)",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "10001"
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!BasisRange"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set withdrawal fee for vault contract with 0x0 address",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "zero",
                    "fee": "1000"
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!address(0)"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set withdrawal fee for vault contract with EOA address",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "EOA",
                    "fee": "1000"
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!isContract"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set withdrawal fee ",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "60"
                  },
                  "executer": "user1",
                  "expect": "fail",
                  "message": "caller is not having governance"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "User don't have to pay withdrawal fee when no treasury address is set even if withdrawal fee is set",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user1",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user1",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user1",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user1",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user1"
                  },
                  "expectedValue": "1000000000000000000"
                }
              ]
            }
          ]
        },
        {
          "description": "User don't have to pay withdrawal fee when no treasury address is set even if No withdrawal fee is set",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "",
                  "action": "fundWallet",
                  "args": {
                    "addressName": "user1",
                    "amount": "1000000000000000000"
                  },
                  "executer": "",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "erc20",
                  "action": "approve(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "amount": "1000000000000000000"
                  },
                  "executer": "user1",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userDepositRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user1",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "vault",
                  "action": "userWithdrawRebalance(uint256)",
                  "args": {
                    "amount": "1000000000000000000"
                  },
                  "executer": "user1",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "erc20",
                  "action": "balanceOf(address)",
                  "args": {
                    "addressName": "user1"
                  },
                  "expectedValue": "1000000000000000000"
                }
              ]
            }
          ]
        },

        {
          "description": "Governance shouldn't be able to set empty treasury accounts array",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": []
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "length!>0"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance should be able to set 1 treasury account",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "registry",
                  "action": "getTreasuryShares(address)",
                  "args": {
                    "addressName": "vault"
                  },
                  "expectedValue": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                }
              ]
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set 1 treasury",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "user1",
                  "expect": "fail",
                  "message": "caller is not having governance"
                }
              ],
              "getActions": []
            }
          ]
        },

        {
          "description": "Governance should be able to set 2 treasury accounts",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "500"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                    ]
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                }
              ],
              "getActions": [
                {
                  "contract": "registry",
                  "action": "getTreasuryShares(address)",
                  "args": {
                    "addressName": "vault"
                  },
                  "expectedValue": [
                    ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                    ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                  ]
                }
              ]
            }
          ]
        },
        {
          "description": "Non-Governance shouldn't be able to set 2 treasury accounts",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 200]
                    ]
                  },
                  "executer": "user1",
                  "expect": "fail",
                  "message": "caller is not having governance"
                }
              ],
              "getActions": []
            }
          ]
        },

        {
          "description": "Governance shouldn't be able to set treasury with address(0)",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [["0x0000000000000000000000000000000000000000", 500]]
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!address(0)"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set any 1 treasury address among multiple treasury addresses with address(0)",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 300],
                      ["0x0000000000000000000000000000000000000000", 200]
                    ]
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!address(0)"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set treasury account fee shares not equal to withdrawal fee share",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setWithdrawalFee(address,uint256)",
                  "args": {
                    "addressName": "vault",
                    "fee": "800"
                  },
                  "executer": "owner",
                  "expect": "success",
                  "message": ""
                },
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "vault",
                    "treasuryAccountsWithShares": [
                      ["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500],
                      ["0xBc3dBFf7ec4f650e736b261C3E20335070D2b81B", 500]
                    ]
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "FeeShares!=WithdrawalFee"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set treasury share for vault contract with 0x0 address",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "zero",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!address(0)"
                }
              ],
              "getActions": []
            }
          ]
        },
        {
          "description": "Governance shouldn't be able to set treasury share for vault contract with EOA address",
          "activities": [
            {
              "setActions": [
                {
                  "contract": "registry",
                  "action": "setTreasuryShares(address,(address,uint256)[])",
                  "args": {
                    "addressName": "EOA",
                    "treasuryAccountsWithShares": [["0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b", 500]]
                  },
                  "executer": "owner",
                  "expect": "fail",
                  "message": "!isContract"
                }
              ],
              "getActions": []
            }
          ]
        }
      ]
    }
  ]
}
