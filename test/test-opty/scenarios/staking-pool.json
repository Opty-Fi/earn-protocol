{
  "title": "Staking Pool",
  "description": "Test cases for Staking Pool contract",
  "stories": [
    {
      "description": "User that is not the operator shouldn't be able to set the underlying token",
      "setActions": [
        {
          "contract": "stakingPool1D",
          "action": "setToken(address)",
          "args": {
            "token": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "User that is not the operator shouldn't be able to set the OPTYMinter",
      "setActions": [
        {
          "contract": "stakingPool1D",
          "action": "setOPTYMinter(address)",
          "args": {
            "OPTYMinter": "0x6b175474e89094c44da98b954eedeac495271d0f"
          },
          "executor": "user1",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "User shouldn't be able to approve non-contract addresses",
      "setActions": [
        {
          "contract": "stakingPool1D",
          "action": "setOPTYMinter(address)",
          "args": {
            "OPTYMinter": "0x25b972807A54bBbCE0A206A76eA68f3c556c1a8B"
          },
          "executor": "owner",
          "expect": "fail",
          "message": "!_optyMinter.isContract"
        },
        {
          "contract": "stakingPool1D",
          "action": "setToken(address)",
          "args": {
            "token": "0x25b972807A54bBbCE0A206A76eA68f3c556c1a8B"
          },
          "executor": "owner",
          "expect": "fail",
          "message": "!_underlyingToken.isContract"
        },
        {
          "contract": "stakingPool1D",
          "action": "setOPTYStakingRateBalancer(address)",
          "args": {
            "OPTYStakingRateBalancer": "0x25b972807A54bBbCE0A206A76eA68f3c556c1a8B"
          },
          "executor": "owner",
          "expect": "fail",
          "message": "!_optyStakingRateBalancer.isContract"
        }
      ],
      "getActions": []
    },
    {
      "description": "User should be able to stake OPTY tokens",
      "setActions": [
        {
          "contract": "opty",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool1D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "userStake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "stakingPool1D",
          "action": "balance()",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool1D",
          "action": "balanceOf(address)",
          "expectedValue": "100000000"
        }
      ]
    },
    {
      "description": "User should be able to unstake OPTY tokens after the locking period has ended",
      "setActions": [
        {
          "contract": "opty",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool1D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "userStake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool1D",
            "stakedOPTY": "200000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "userUnstake(uint256)",
          "args": {
            "stakedOPTY": "200000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "stakingPool1D",
          "action": "balance()",
          "expectedValue": "0"
        },
        {
          "contract": "stakingPool1D",
          "action": "balanceOf(address)",
          "expectedValue": "0"
        },
        {
          "contract": "opty",
          "action": "balanceOf(address)",
          "expectedValue": "964040000000000"
        }
      ]
    },
    {
      "description": "User shouldn't be able to unstake OPTY tokens before the locking period has ended",
      "setActions": [
        {
          "contract": "opty",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool1D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "userStake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool1D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool1D",
          "action": "userUnstake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "fail",
          "message": "you can't unstake until timelockPeriod has ended"
        }
      ],
      "getActions": [
        {
          "contract": "stakingPool1D",
          "action": "balance()",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool1D",
          "action": "balanceOf(address)",
          "expectedValue": "100000000"
        }
      ]
    },
    {
      "description": "User should be able to modify the OPTY rates according to the multipliers",
      "setActions": [
        {
          "contract": "opty",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool30D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool30D",
          "action": "userStake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "opty",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool60D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool60D",
          "action": "userStake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "opty",
          "action": "approve(address,uint256)",
          "args": {
            "spender": "stakingPool180D",
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "stakingPool180D",
          "action": "userStake(uint256)",
          "args": {
            "stakedOPTY": "100000000"
          },
          "executor": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "stakingPool1D",
          "action": "optyRatePerSecond()",
          "expectedValue": "1754385964"
        },
        {
          "contract": "stakingPool30D",
          "action": "balance()",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool30D",
          "action": "balanceOf(address)",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool30D",
          "action": "optyRatePerSecond()",
          "expectedValue": "2105263157"
        },
        {
          "contract": "stakingPool60D",
          "action": "balance()",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool60D",
          "action": "balanceOf(address)",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool60D",
          "action": "optyRatePerSecond()",
          "expectedValue": "2631578947"
        },
        {
          "contract": "stakingPool180D",
          "action": "balance()",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool180D",
          "action": "balanceOf(address)",
          "expectedValue": "100000000"
        },
        {
          "contract": "stakingPool180D",
          "action": "optyRatePerSecond()",
          "expectedValue": "3508771929"
        }
      ]
    }
  ]
}