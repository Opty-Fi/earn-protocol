{
  "title": "Test Staking Vault",
  "description": "Test cases for OPTYStakingVault contract",
  "stories": [
    {
      "description": "setOptyRatePerSecond should fail if caller is not the StakingRateBalancer",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setOptyRatePerSecond(uint256)",
          "args": {
            "executer": "owner",
            "value": "1000000000000000000"
          },
          "expect": "fail",
          "message": "caller is not the optyStakingRateBalancer"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "setOptyRatePerSecond should set a specific OPTY rate per second if caller is the StakingRateBalancer",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setOptyRatePerSecond(uint256)",
          "args": {
            "executer": "optyStakingRateBalancer",
            "value": "1000000000000000000"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "optyRatePerSecond()",
          "args": {},
          "expectedValue": "1000000000000000000"
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingVault",
          "action": "setOptyRatePerSecond(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "userStakeAll should stake the whole balance of the user",
      "setActions": [
        {
          "contract": "",
          "action": "fundWalletOPTY",
          "args": {},
          "expect": "",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userStakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "1000000000000000000"
        },
        {
          "contract": "dummyToken",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "0"
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingVault",
          "action": "userUnstakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnOPTY",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "userStake should stake a specific amount of OPTY",
      "setActions": [
        {
          "contract": "",
          "action": "fundWalletOPTY",
          "args": {},
          "expect": "",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userStake(uint256)",
          "args": {
            "executer": "owner",
            "value": "1000000000000000000"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "1000000000000000000"
        },
        {
          "contract": "dummyToken",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "0"
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingVault",
          "action": "userUnstakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnOPTY",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "userUnstakeAll should unstake the whole balance of the user",
      "setActions": [
        {
          "contract": "",
          "action": "fundWalletOPTY",
          "args": {},
          "expect": "",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userStakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userUnstakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "0"
        },
        {
          "contract": "dummyToken",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": ">0"
        }
      ],
      "cleanActions": [
        {
          "contract": "",
          "action": "burnOPTY",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "userUnstake should stake a specific amount of OPTY",
      "setActions": [
        {
          "contract": "",
          "action": "fundWalletOPTY",
          "args": {},
          "expect": "",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userStake(uint256)",
          "args": {
            "executer": "owner",
            "value": "1000000000000000000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userUnstake(uint256)",
          "args": {
            "executer": "owner",
            "value": "1000000000000000000"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "0"
        },
        {
          "contract": "dummyToken",
          "action": "balanceOf(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": ">0"
        }
      ],
      "cleanActions": [
        {
          "contract": "",
          "action": "burnOPTY",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getPricePerFullShare should return the staking vault tokens price in OPTY",
      "setActions": [
        {
          "contract": "",
          "action": "fundWalletOPTY",
          "args": {},
          "expect": "",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userStakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "getPricePerFullShare()",
          "args": {},
          "expectedValue": "1000000000000000000"
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingVault",
          "action": "userUnstakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnOPTY",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "balanceInOpty should return the OPTY value of the staking vault token balance of a specific user",
      "setActions": [
        {
          "contract": "",
          "action": "fundWalletOPTY",
          "args": {},
          "expect": "",
          "message": ""
        },
        {
          "contract": "optyStakingVault",
          "action": "userStakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "balanceInOpty(address)",
          "args": {
            "executer": "owner"
          },
          "expectedValue": "1000000000000000000"
        }
      ],
      "cleanActions": [
        {
          "contract": "optyStakingVault",
          "action": "userUnstakeAll()",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnOPTY",
          "args": {
            "executer": "owner"
          },
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "setTimelockPeriod should fail if caller is not the Operator",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setTimelockPeriod(uint256)",
          "args": {
            "executer": "user1",
            "value": "86400"
          },
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "setTimelockPeriod should fail if the timelock period is less than 86400 seconds (1 day)",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setTimelockPeriod(uint256)",
          "args": {
            "executer": "owner",
            "value": "86399"
          },
          "expect": "fail",
          "message": "Timelock should be at least 1 day."
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "setTimelockPeriod should set the timelock period if caller is the operator and the value is greater than 86400 seconds (1 day)",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setTimelockPeriod(uint256)",
          "args": {
            "executer": "owner",
            "value": "86401"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "timelockPeriod()",
          "args": {},
          "expectedValue": "86401"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "setToken should fail if caller is not the Operator",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setToken(address)",
          "args": {
            "executer": "user1"
          },
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "setToken should fail if the given address is not a contract",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setToken(address)",
          "args": {
            "executer": "owner"
          },
          "expect": "fail",
          "message": "!_underlyingToken.isContract"
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "setToken should set the underlying token if caller is the operator and the given address is a contract",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "setToken(address)",
          "args": {
            "executer": "owner",
            "value": "dummyToken"
          },
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "token()",
          "args": {},
          "expectedValue": "dummyToken"
        }
      ],
      "cleanActions": []
    },
    {
      "description": "updatePool should update the lastPoolUpdate with the last block timestamp",
      "setActions": [
        {
          "contract": "optyStakingVault",
          "action": "updatePool()",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyStakingVault",
          "action": "lastPoolUpdate()",
          "args": {},
          "expectedValue": ""
        }
      ],
      "cleanActions": []
    }
  ]
}
