{
  "title": "Opty Distributor",
  "description": "Test cases for OptyDistributor contract",
  "stories": [
    {
      "description": "Operator can add opty vault",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "allOptyVaults(uint256)",
          "args": {
            "index": 0
          },
          "expectedValue": "vault"
        }
      ]
    },
    {
      "description": "Non-Operator can't add opty vault",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "admin",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can set opty vault",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "optyVaultEnabled(address)",
          "args": {
            "contractName": "vault"
          },
          "expectedValue": true
        }
      ]
    },
    {
      "description": "Non-Operator can't set opty vault",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "admin",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "Operator can set opty vault rate",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "optyVaultRatePerSecond(address)",
          "args": {
            "contractName": "vault"
          },
          "expectedValue": "100"
        }
      ]
    },
    {
      "description": "Non-Operator can't set opty vault rate",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "admin",
          "expect": "fail",
          "message": "caller is not the operator"
        }
      ],
      "getActions": []
    },
    {
      "description": "User should have opty token equal its rate after running userDepositReBalance",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": "100"
        }
      ]
    },
    {
      "description": "User shouldn't earn opty if Vault isn't enabled",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": false
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": "0"
        }
      ]
    },
    {
      "description": "User shouldn't earn any more opty after transfering all vault token",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "transfer(address,uint256)",
          "args": {
            "addressName": "admin",
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": ""
        },
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": ""
        }
      ]
    },
    {
      "description": "User should earn opty from both registered vaults",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault2"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault2",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault2",
            "rate": "50"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault2"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault2",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": "150"
        }
      ]
    },
    {
      "description": "User cannot mint opty if the user is not optyDistributor",
      "setActions": [
        {
          "contract": "opty",
          "action": "mint(address,uint256)",
          "args": {
            "addressName": "admin",
            "amount": "100"
          },
          "executer": "admin",
          "expect": "fail",
          "message": "!optyDistributor"
        },
        {
          "contract": "optyDistributor",
          "action": "mintOpty(address,uint256)",
          "args": {
            "addressName": "admin",
            "amount": "100"
          },
          "executer": "admin",
          "expect": "fail",
          "message": "caller is not a staking vault"
        }
      ],
      "getActions": []
    },
    {
      "description": "User1 and User2 deposit, User1 depositRebalance. Then, both of them should have opty token",
      "setActions": [
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "transfer(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "addressName": "user1"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "1000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDeposit(uint256)",
          "args": {
            "amount": "1000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "user1",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDeposit(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "user1",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "1000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "1000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": "50"
        },
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "user1"
          },
          "expectedValue": "50"
        }
      ]
    },
    {
      "description": "User should able to claim opty token equal its rate after running userDepositReBalance",
      "setActions": [
        {
          "contract": "registry",
          "action": "setOPTYDistributor(address)",
          "args": {
            "contractName": "optyDistributor"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "addOptyVault(address)",
          "args": {
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVault(address,bool)",
          "args": {
            "contractName": "vault",
            "isEnabled": true
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "setOptyVaultRate(address,uint256)",
          "args": {
            "contractName": "vault",
            "rate": "100"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "erc20",
          "action": "approve(address,uint256)",
          "args": {
            "amount": "2000000000000000000",
            "contractName": "vault"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "vault",
          "action": "userDepositRebalance(uint256)",
          "args": {
            "amount": "2000000000000000000"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "optyDistributor",
          "action": "claimOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "optyDistributor",
          "action": "claimableOpty(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": "0"
        },
        {
          "contract": "opty",
          "action": "balanceOf(address)",
          "args": {
            "addressName": "owner"
          },
          "expectedValue": "100"
        }
      ]
    }
  ]
}
