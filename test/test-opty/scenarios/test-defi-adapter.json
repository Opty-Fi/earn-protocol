{
  "title": "Test DeFi Adapter",
  "description": "Test cases for DeFi adapters.",
  "stories": [
    {
      "description": "getDepositAllCodes() with 100% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner"
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with pool investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {
            "maxDepositPoolPct": "90"
          },
          "executer": "owner"
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with 0 investment limit (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with investment limit (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": "10"
          },
          "executer": "owner"
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    }
  ]
}
