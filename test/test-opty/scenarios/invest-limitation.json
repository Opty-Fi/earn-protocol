{
  "title": "Invest Limitation",
  "description": "Test cases for invest limitation.",
  "vaults": [
    {
      "name": "Vault",
      "riskProfileCode": 1,
      "stories": [
        {
          "description": "User should be able to deposit into a correct liquidity pool based on the current best strategy",
          "setActions": [
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "balance()",
              "args": {},
              "expectedValue": "0"
            },
            {
              "contract": "firstAdapter",
              "action": "getLiquidityPoolTokenBalance(address,address,address)",
              "args": {},
              "expectedValue": ">"
            }
          ]
        },
        {
          "description": "User should be able to withdraw from a correct liquidity pool based on the current best strategy",
          "setActions": [
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userWithdrawRebalance(uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "balance()",
              "args": {},
              "expectedValue": "0"
            },
            {
              "contract": "firstAdapter",
              "action": "getLiquidityPoolTokenBalance(address,address,address)",
              "args": {},
              "expectedValue": "<"
            }
          ]
        },
        {
          "description": "User should be able to deposit unlimited amount by default",
          "setActions": [
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "balance()",
              "args": {},
              "expectedValue": "0"
            },
            {
              "contract": "firstAdapter",
              "action": "getLiquidityPoolTokenBalance(address,address,address)",
              "args": {},
              "expectedValue": ">"
            }
          ]
        },
        {
          "description": "User shouldn't be able to deposit more than max deposit amount",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositProtocolMode(uint8)",
              "args": {
                "type": 0
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositAmount(address,address,uint256)",
              "args": {
                "amount": "1"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "balance()",
              "args": {},
              "expectedValue": "1"
            }
          ]
        },
        {
          "description": "User shouldn't be able to deposit any amount when max deposit amount = 0",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositProtocolMode(uint8)",
              "args": {
                "type": 0
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositAmount(address,address,uint256)",
              "args": {
                "amount": "0"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "erc20",
              "action": "approve(address,uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            },
            {
              "contract": "vault",
              "action": "userDepositRebalance(uint256)",
              "args": {
                "amount": "2"
              },
              "executer": "owner",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "vault",
              "action": "balance()",
              "args": {},
              "expectedValue": "2"
            }
          ]
        },
        {
          "description": "RiskOperator should be able to set max deposit mode",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositProtocolMode(uint8)",
              "args": {
                "type": 0
              },
              "executer": "riskOperator",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "firstAdapter",
              "action": "maxDepositProtocolMode()",
              "args": {},
              "expectedValue": {
                "type": 0
              }
            }
          ]
        },
        {
          "description": "Non RiskOperator cannot set max deposit mode",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositProtocolMode(uint8)",
              "args": {
                "type": 0
              },
              "executer": "admin",
              "expect": "fail",
              "message": "caller is not the riskOperator"
            }
          ],
          "getActions": []
        },

        {
          "description": "RiskOperator should be able to set max deposit amount",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositAmount(address,address,uint256)",
              "args": {
                "amount": "5"
              },
              "executer": "riskOperator",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "firstAdapter",
              "action": "maxDepositAmount(address,address)",
              "args": {},
              "expectedValue": "5"
            }
          ]
        },

        {
          "description": "Non RiskOperator cannot set max deposit amount",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositAmount(address,address,uint256)",
              "args": {
                "amount": "0"
              },
              "executer": "admin",
              "expect": "fail",
              "message": "caller is not the riskOperator"
            }
          ],
          "getActions": []
        },
        {
          "description": "RiskOperator should be able to set max deposit pool percentage",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositPoolPct(address,uint256)",
              "args": {
                "amount": "5"
              },
              "executer": "riskOperator",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "firstAdapter",
              "action": "maxDepositPoolPct(address)",
              "args": {},
              "expectedValue": "5"
            }
          ]
        },
        {
          "description": "Non RiskOperator cannot set max deposit pool percentage",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositPoolPct(address,uint256)",
              "args": {
                "amount": "0"
              },
              "executer": "admin",
              "expect": "fail",
              "message": "caller is not the riskOperator"
            }
          ],
          "getActions": []
        },
        {
          "description": "RiskOperator should be able to set max deposit protocol percentage",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositProtocolPct(uint256)",
              "args": {
                "amount": "5"
              },
              "executer": "riskOperator",
              "expect": "success",
              "message": ""
            }
          ],
          "getActions": [
            {
              "contract": "firstAdapter",
              "action": "maxDepositProtocolPct()",
              "args": {},
              "expectedValue": "5"
            }
          ]
        },
        {
          "description": "Non RiskOperator cannot set max deposit protocol percentage",
          "setActions": [
            {
              "contract": "firstAdapter",
              "action": "setMaxDepositProtocolPct(uint256)",
              "args": {
                "amount": "0"
              },
              "executer": "admin",
              "expect": "fail",
              "message": "caller is not the riskOperator"
            }
          ],
          "getActions": []
        }
      ]
    }
  ]
}
